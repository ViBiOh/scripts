#!/usr/bin/env bash

GIT_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

git_is_inside() {
  git rev-parse --is-inside-work-tree 2>&1
}

git_root() {
  if [[ $(git_is_inside) != "true" ]]; then
    pwd
    return
  fi

  git rev-parse --show-toplevel
}

git_remote_repository() {
  if [[ $(git_is_inside) != "true" ]]; then
    return
  fi

  local REMOTE_URL
  REMOTE_URL="$(git remote get-url --push "$(git remote show | head -1)")"

  if [[ ${REMOTE_URL} =~ ^.*@.*:(.*)\/(.*).git$ ]]; then
    printf "%s/%s" "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}"
  fi
}

git_last_tag() {
  if [[ $(git_is_inside) != "true" ]]; then
    return
  fi

  git describe --tag 2> /dev/null | awk -F "-" '{print $1}'
}

git_is_commit_wip() {
  if [[ ${1} =~ ^fixup\! ]]; then
    printf "true"
  fi

  local WIP_REGEX="\\bwip\\b"
  if [[ ${OSTYPE} =~ ^darwin ]]; then
    WIP_REGEX="[[:<:]]wip[[:>:]]"
  fi

  if [[ ${1} =~ ${WIP_REGEX} ]]; then
    printf "true"
  fi
}

git_changelog() {
  source "${GIT_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  if [[ "${#}" -ne 2 ]]; then
    printf "%bUsage: git_changelog [END_REF] [START_REF]%b\n" "${RED}" "${RESET}"
    return 1
  fi

  if [[ $(git_is_inside) != "true" ]]; then
    printf "%bnot inside a git tree%b\n" "${YELLOW}" "${RESET}"
    return 2
  fi

  declare -A PREFIXES

  PREFIXES['chore']='Changes in the core of the repository'
  PREFIXES['docs']='Documentation only changes'
  PREFIXES['feat']=$(printf 'A new feature for user %b(production change)%b' "${RED}" "${RESET}")
  PREFIXES['fix']=$(printf 'A bug fix for user %b(production change)%b' "${RED}" "${RESET}")
  PREFIXES['refactor']=$(printf 'A change that is not a feature not a bug %b(production change)%b' "${RED}" "${RESET}")
  PREFIXES['style']='A change that do not affect the meaning of the code'
  PREFIXES['test']='A new test or correcting existing tests'

  local FEATURES=()
  local FIXES=()
  local MISC=()
  local BREAKING=()

  IFS=$'\n'

  shopt -s nocasematch
  for hash in $(git log --no-merges --pretty=format:'%h' "${1}...${2}"); do
    local VERSION_MESSAGE=""
    local HASH=""
    local TYPE=""
    local BREAK=""

     for line in $(git show -s --format='%h %B' "${hash}" | grep -v '^\s*$'); do
      if [[ -z ${VERSION_MESSAGE} ]] && [[ ${line} =~ ^([0-9a-f]{1,16})\ (revert )?($(IFS='|'; echo "${!PREFIXES[*]}"))(\(.+\))?(\!)?:\ (.*)$ ]]; then

        HASH="${BASH_REMATCH[1]}"
        local REVERT="${BASH_REMATCH[2]}"
        TYPE="${BASH_REMATCH[3]}"
        local COMPONENT="${BASH_REMATCH[4]}"
        local CONTENT="${BASH_REMATCH[6]}"
        BREAK="${BASH_REMATCH[5]}"

        VERSION_MESSAGE="*"

        if [[ -n ${REVERT} ]]; then
          VERSION_MESSAGE+=" **reverted**"
        fi

        if [[ -n ${COMPONENT} ]]; then
          VERSION_MESSAGE+=" *${COMPONENT}*"
        fi

        VERSION_MESSAGE+=" ${CONTENT}"
      fi

      if [[ -z ${VERSION_MESSAGE} ]]; then
        break
      fi

      if [[ ${line} =~ ^BREAKING[-\ ]CHANGE:\ (.*)$ ]]; then
        BREAKING+=("* ${BASH_REMATCH[1]}")
        BREAK=""

        continue
      fi

      if [[ ${line} =~ ^((closes?)|(fix(ed)?))\ (#[0-9]+)$ ]]; then
        VERSION_MESSAGE+=" ${BASH_REMATCH[5]}"
        HASH=""

        continue
      fi
    done

    if [[ -n ${VERSION_MESSAGE} ]]; then
      if [[ -n ${HASH} ]]; then
        VERSION_MESSAGE+=" ${HASH}"
      fi

      if [[ ${TYPE} == "feat" ]]; then
        FEATURES+=("${VERSION_MESSAGE}")
      elif [[ ${TYPE} == "fix" ]]; then
        FIXES+=("${VERSION_MESSAGE}")
      else
        MISC+=("${VERSION_MESSAGE}")
      fi

      if [[ ${BREAK} == "!" ]]; then
        BREAKING+=("${VERSION_MESSAGE}")
      fi
    fi
  done

  if [[ ${#FEATURES[@]} -gt 0 ]]; then
    printf "# Features\n\n%s\n\n" "$(printf "%s\n" "${FEATURES[@]}")"
  fi

  if [[ ${#FIXES[@]} -gt 0 ]]; then
    printf "# Fixes\n\n%s\n\n" "$(printf "%s\n" "${FIXES[@]}")"
  fi

  if [[ ${#MISC[@]} -gt 0 ]]; then
    printf "# Miscellaneous\n\n%s\n\n" "$(printf "%s\n" "${MISC[@]}")"
  fi

  if [[ ${#BREAKING[@]} -gt 0 ]]; then
    printf "# BREAKING CHANGES\n\n%s\n\n" "$(printf "%s\n" "${BREAKING[@]}")"
  fi
}

head_sync() {
  source "${GIT_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  if [[ ${#} -ne 2 ]]; then
    printf "%bUsage: head_sync [REMOTE_SERVER] [REMOTE_PATH]%b\n" "${RED}" "${RESET}"
    return 1
  fi

  local branch
  branch="$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')"
  ssh "${1}" "cd ${2} && git reset HEAD . && git clean -f && git status -u -s | awk '{print $2}' | xargs rm -rf && git checkout -- . && git fetch && git checkout ${branch} && git pull"
}

git_sync() {
  source "${GIT_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  if [[ ${#} -lt 2 ]]; then
    printf "%bUsage: git_sync [REMOTE_SERVER] [REMOTE_PATH] [DRY]?%b\n" "${RED}" "${RESET}"
    return 1
  fi

  git_root
  isGit=$?
  if [[ ${isGit} -ne 0 ]]; then
    return ${isGit}
  fi

  local REMOTE_PATH_PREFIX="~/${2}"
  if [[ ${2:0:1} == "/" ]]; then
    REMOTE_PATH_PREFIX="${2}"
  fi

  local dry=false
  if [[ $(echo "${3}" | tr "[:upper:]" "[:lower:]") == "dry" ]]; then
    dry=true
  fi

  if [[ ${dry} == true ]]; then
    printf "%bDry run of syncing files...%b\n" "${BLUE}" "${RESET}"
  else
    printf "%bSyncing files at %s...%b\n" "${BLUE}" "$(date +'%H:%M:%S')" "${RESET}"
  fi

  declare -a toSync
  declare -a toDelete

  local IFS=$'\n'
  for gitFile in $(git status --porcelain); do
    local prefix="${gitFile:0:2}"
    local trimmedPrefix="${prefix#[[:space:]]}"

    case "${trimmedPrefix:0:1}" in
      "M" | "A" | "?")
        toSync+=("${gitFile:3}")
        ;;

      "D")
        toDelete+=("${REMOTE_PATH_PREFIX}/${gitFile:3}")
        ;;

      "R")
        local originFile
        originFile="$(echo "${gitFile}" | awk '{print $2}')"
        local destinationFile
        destinationFile="$(echo "${gitFile}" | awk '{print $4}')"

        toDelete+=("${REMOTE_PATH_PREFIX}/${originFile}")
        toSync+=("${destinationFile}")
        ;;

      *)
        printf "%b¯\_(ツ)_/¯ Don't know how to handle ${gitFile}%b\n" "${BLUE}" "${RESET}"
    esac
  done

  if ! ${dry}; then
    printf "%bCleaning remote%b\n" "${YELLOW}" "${RESET}"
    ssh "${1}" "cd ${REMOTE_PATH_PREFIX} && git clean -f && git checkout -- ."
  fi

  if [[ ${#toDelete[@]} -ne 0 ]]; then
    ! ${dry} && ssh "${1}" "rm -rf ${toDelete[*]}"
    printf "%b- Deleted\n%s%b\n" "${RED}" "${toDelete[*]}" "${RESET}"
  fi

  if [[ ${#toSync[@]} -ne 0 ]]; then
    ! ${dry} && rsync -raR "${toSync[@]}" "${1}:${REMOTE_PATH_PREFIX}/"
    printf "%b+ Copied\n%s%b\n" "${GREEN}" "${toSync[*]}" "${RESET}"
  fi

  printf "%bDone at %s!%b\n\n" "${BLUE}" "$(date +'%H:%M:%S')" "${RESET}"
}

watch_sync() {
  if [[ -z ${NO_HEAD_SYNC:-} ]]; then
    head_sync "${@}"
  fi

  git_sync "${@}"

  fswatch -0 -o --exclude=.git/ . | while read -r -d ""
  do
    git_sync "${@}"
  done
}
