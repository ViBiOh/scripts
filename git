#!/usr/bin/env bash

GIT_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

git_conventionnal_commits() {
  source "${GIT_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  declare -gA CONVENTIONAL_COMMIT_SCOPES
  CONVENTIONAL_COMMIT_SCOPES['build']='Changes that affect the build system or external dependencies'
  CONVENTIONAL_COMMIT_SCOPES['chore']='Changes in the core of the repository'
  CONVENTIONAL_COMMIT_SCOPES['ci']='Changes in Continuous Integration configuration files and scripts'
  CONVENTIONAL_COMMIT_SCOPES['docs']='Documentation only changes'
  CONVENTIONAL_COMMIT_SCOPES['feat']=$(printf 'A new feature for user %b(production change)%b' "${RED}" "${RESET}")
  CONVENTIONAL_COMMIT_SCOPES['fix']=$(printf 'A bug fix for user %b(production change)%b' "${RED}" "${RESET}")
  CONVENTIONAL_COMMIT_SCOPES['perf']=$(printf 'A performance improvement for user %b(production change)%b' "${RED}" "${RESET}")
  CONVENTIONAL_COMMIT_SCOPES['refactor']=$(printf 'A change that is not a feature not a bug %b(production change)%b' "${RED}" "${RESET}")
  CONVENTIONAL_COMMIT_SCOPES['style']='A change that do not affect the meaning of the code'
  CONVENTIONAL_COMMIT_SCOPES['test']='A new test or correcting existing tests'
}

git_is_inside() {
  git rev-parse --is-inside-work-tree 2>&1
}

git_root() {
  if [[ $(git_is_inside) != "true" ]]; then
    pwd
    return
  fi

  git rev-parse --show-toplevel
}

git_browse() {
  shopt -s nullglob
  for dir in "$(pwd)"/*; do
    if [[ ! -d ${dir} ]]; then
      continue
    fi

    if [[ $(git_is_inside) == "true" ]]; then
      continue
    fi

    (
      cd "${dir}" || return
      var_info "Running command in ${dir}"
      eval "${@}"
    )
  done
  shopt -u nullglob
}

git_remote_repository() {
  if [[ $(git_is_inside) != "true" ]]; then
    return
  fi

  local REMOTE_URL
  REMOTE_URL="$(git remote get-url --push "$(git remote show | head -1)")"

  if [[ ${REMOTE_URL} =~ ^.*@.*:(.*)\/(.*).git$ ]]; then
    printf "%s/%s" "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}"
  fi
}

git_is_merge_commit() {
  if [[ ${1} =~ Merge\ (pull\ request|branch) ]]; then
    printf "true"
  else
    printf "false"
  fi
}

git_is_commit_wip() {
  if [[ ${1} =~ ^fixup\! ]]; then
    printf "true"
    return
  fi

  local WIP_REGEX='\bwip\b'
  if [[ ${OSTYPE} =~ ^darwin ]]; then
    WIP_REGEX="[[:<:]]wip[[:>:]]"
  fi

  if [[ ${1} =~ ${WIP_REGEX} ]]; then
    printf "true"
  else
    printf "false"
  fi
}

git_is_conventional_commit() {
  git_conventionnal_commits

  shopt -s nocasematch
  if [[ ${1} =~ ^(revert:\ )?($(
    IFS='|'
    echo "${!CONVENTIONAL_COMMIT_SCOPES[*]}"
  ))(\(.+\))?\!?:\ [a-zA-Z0-9\[\(]+ ]]; then
    printf "true"
  else
    printf "false"
  fi
}

git_is_valid_description() {
  export COMMIT_MAX_LENGTH="70"

  if [[ ${1} =~ ^.{1,${COMMIT_MAX_LENGTH}}$ ]]; then
    printf "true"
  else
    printf "false"
  fi
}

git_conventionnal_commit_guidelines() {
  source "${GIT_SCRIPT_DIR}/meta" && meta_init "var"
  var_color
  git_conventionnal_commits

  var_warning "Guidelines for prefixing commit message from conventionalcommits.org\n"

  for prefix in "${!CONVENTIONAL_COMMIT_SCOPES[@]}"; do
    printf "%b%s%b(component)%b:%b\n" "${GREEN}" "${prefix}" "${BLUE}" "${GREEN}" "${RESET}"
    printf "\t%s\n" "${CONVENTIONAL_COMMIT_SCOPES[${prefix}]}"
  done

  var_warning "\n\nYou can add '!' before ':', for indicating breaking change"
  printf "\n\t%bfeat%b(api)%b!%b:%b Adding mandatory parameter on signup\n\n" "${GREEN}" "${BLUE}" "${RED}" "${GREEN}" "${RESET}"
}

git_valid_description_guideline() {
  source "${GIT_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  printf "\n%bYou have to use a short commit description (max %d characters)%b\n\n" "${YELLOW}" "${COMMIT_MAX_LENGTH:-70}" "${RESET}"
}

git_last_tag() {
  if [[ $(git_is_inside) != "true" ]]; then
    var_warning "not inside a git tree"
    return 1
  fi

  git describe --tag 2>/dev/null | awk -F "-" '{print $1}'
}

git_changelog() {
  source "${GIT_SCRIPT_DIR}/meta" && meta_init "var"
  var_color
  git_conventionnal_commits

  if [[ ${#} -ne 2 ]]; then
    var_error "Usage: git_changelog [END_REF] START_REF"
    return 1
  fi

  if [[ $(git_is_inside) != "true" ]]; then
    var_warning "not inside a git tree"
    return 2
  fi

  local FEATURES=()
  local FIXES=()
  local MISC=()
  local BREAKING=()

  IFS=$'\n'

  shopt -s nocasematch
  for hash in $(git log --no-merges --pretty=format:'%h' "${1:-HEAD}...${2:-$(git_last_tag)}"); do
    local VERSION_MESSAGE=""
    local HASH=""
    local TYPE=""
    local BREAK=""

    for line in $(git show -s --format='%h %B' "${hash}" | grep -v '^\s*$'); do
      if [[ -z ${VERSION_MESSAGE} ]] && [[ ${line} =~ ^([0-9a-f]{1,16})\ (revert )?($(
        IFS='|'
        echo "${!CONVENTIONAL_COMMIT_SCOPES[*]}"
      ))(\(.+\))?(\!)?:\ (.*)$ ]]; then

        HASH="${BASH_REMATCH[1]}"
        local REVERT="${BASH_REMATCH[2]}"
        TYPE="${BASH_REMATCH[3]}"
        local COMPONENT="${BASH_REMATCH[4]}"
        local CONTENT="${BASH_REMATCH[6]}"
        BREAK="${BASH_REMATCH[5]}"

        VERSION_MESSAGE="*"

        if [[ -n ${REVERT} ]]; then
          VERSION_MESSAGE+=" **reverted**"
        fi

        if [[ -n ${COMPONENT} ]]; then
          VERSION_MESSAGE+=" *${COMPONENT}*"
        fi

        VERSION_MESSAGE+=" ${CONTENT}"
      fi

      if [[ -z ${VERSION_MESSAGE} ]]; then
        break
      fi

      if [[ ${line} =~ ^BREAKING[-\ ]CHANGE:\ (.*)$ ]]; then
        BREAKING+=("* ${BASH_REMATCH[1]}")
        BREAK=""

        continue
      fi

      if [[ ${line} =~ ^((closes?)|(fix(ed)?))\ (#[0-9]+)$ ]]; then
        VERSION_MESSAGE+=" ${BASH_REMATCH[5]}"
        HASH=""

        continue
      fi
    done

    if [[ -n ${VERSION_MESSAGE} ]]; then
      if [[ -n ${HASH} ]]; then
        VERSION_MESSAGE+=" ${HASH}"
      fi

      if [[ ${TYPE} == "feat" ]]; then
        FEATURES+=("${VERSION_MESSAGE}")
      elif [[ ${TYPE} == "fix" ]]; then
        FIXES+=("${VERSION_MESSAGE}")
      else
        MISC+=("${VERSION_MESSAGE}")
      fi

      if [[ ${BREAK} == "!" ]]; then
        BREAKING+=("${VERSION_MESSAGE}")
      fi
    fi
  done

  if [[ ${#FEATURES[@]} -gt 0 ]]; then
    printf "# Features\n\n%s\n\n" "$(printf "%s\n" "${FEATURES[@]}")"
  fi

  if [[ ${#FIXES[@]} -gt 0 ]]; then
    printf "# Fixes\n\n%s\n\n" "$(printf "%s\n" "${FIXES[@]}")"
  fi

  if [[ ${#MISC[@]} -gt 0 ]]; then
    printf "# Miscellaneous\n\n%s\n\n" "$(printf "%s\n" "${MISC[@]}")"
  fi

  if [[ ${#BREAKING[@]} -gt 0 ]]; then
    printf "# BREAKING CHANGES\n\n%s\n\n" "$(printf "%s\n" "${BREAKING[@]}")"
  fi
}

head_sync() {
  source "${GIT_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  if [[ ${#} -ne 2 ]]; then
    var_error "Usage: head_sync REMOTE_SERVER REMOTE_PATH"
    return 1
  fi

  local REMOTE_SERVER="${1}"
  local REMOTE_PATH="${2}"

  local branch
  branch="$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')"
  ssh -A "${REMOTE_SERVER}" "cd '${REMOTE_PATH}' && git reset HEAD . && git clean -f && git status -u -s | awk '{print \$2}' | xargs rm -rf && git checkout -- . && git fetch && git checkout '${branch}' && git pull"
}

git_sync() {
  source "${GIT_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  if [[ ${#} -lt 2 ]]; then
    var_error "Usage: git_sync REMOTE_SERVER REMOTE_PATH [DRY]?"
    return 1
  fi

  local REMOTE_SERVER="${1}"
  local REMOTE_PATH="${2}"
  local DRY="${3:-}"

  git_root
  isGit=$?
  if [[ ${isGit} -ne 0 ]]; then
    return ${isGit}
  fi

  local REMOTE_PATH_PREFIX="~/${REMOTE_PATH}"
  if [[ ${REMOTE_PATH:0:1} == "/" ]]; then
    REMOTE_PATH_PREFIX="${REMOTE_PATH}"
  fi

  local dry=false
  if [[ $(printf "%s" "${DRY:-}" | tr "[:upper:]" "[:lower:]") == "dry" ]]; then
    dry=true
  fi

  if [[ ${dry} == true ]]; then
    var_info "Dry run of syncing files..."
  else
    var_info "Syncing files at $(date +'%H:%M:%S')..."
  fi

  declare -a toSync
  declare -a toDelete

  local IFS=$'\n'
  for gitFile in $(git status --porcelain); do
    local prefix="${gitFile:0:2}"
    local trimmedPrefix="${prefix#[[:space:]]}"

    case "${trimmedPrefix:0:1}" in
    "M" | "A" | "?")
      toSync+=("${gitFile:3}")
      ;;

    "D")
      toDelete+=("${REMOTE_PATH_PREFIX}/${gitFile:3}")
      ;;

    "R")
      local originFile
      originFile="$(echo "${gitFile}" | awk '{print $2}')"
      local destinationFile
      destinationFile="$(echo "${gitFile}" | awk '{print $4}')"

      toDelete+=("${REMOTE_PATH_PREFIX}/${originFile}")
      toSync+=("${destinationFile}")
      ;;

    *)
      var_info "¯\_(ツ)_/¯ Don't know how to handle ${gitFile}"
      ;;
    esac
  done

  if ! ${dry}; then
    var_warning "Cleaning remote"
    ssh "${REMOTE_SERVER}" "cd ${REMOTE_PATH_PREFIX} && git clean -f && git checkout -- ."
  fi

  if [[ ${#toDelete[@]} -ne 0 ]]; then
    ! ${dry} && ssh "${REMOTE_SERVER}" "rm -rf ${toDelete[*]}"
    printf "%b- Deleted\n%s%b\n" "${RED}" "${toDelete[*]}" "${RESET}" 1>&2
  fi

  if [[ ${#toSync[@]} -ne 0 ]]; then
    ! ${dry} && rsync -raR "${toSync[@]}" "${REMOTE_SERVER}:${REMOTE_PATH_PREFIX}/"
    printf "%b+ Copied\n%s%b\n" "${GREEN}" "${toSync[*]}" "${RESET}"
  fi

  var_info "Done at $(date +'%H:%M:%S')!"
  var_info ""
}

watch_sync() {
  if [[ -z ${NO_HEAD_SYNC:-} ]]; then
    head_sync "${@}"
  fi

  git_sync "${@}"

  fswatch -0 -o --exclude=.git/ . | while read -r -d ""; do
    git_sync "${@}"
  done
}
