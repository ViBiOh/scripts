#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

script_dir() {
  local FILE_SOURCE="${BASH_SOURCE[0]}"

  if [[ -L ${FILE_SOURCE} ]]; then
    dirname "$(readlink "${FILE_SOURCE}")"
  else
    (
      cd "$(dirname "${FILE_SOURCE}")" && pwd
    )
  fi
}

seal_content() {
  printf '%s' "${1}" | kubeseal --raw --from-file=/dev/stdin --namespace="${NAMESPACE}" --name="${NAME}" --scope='strict' --cert="${CERT_FILE}"
}

update_manifest() {
  yq eval "(select(.metadata.namespace == \"${NAMESPACE}\" and .metadata.name == \"${NAME}\") | .spec.values.secrets[\"${1}\"] ) |= strenv(MANIFEST_VALUE)" --inplace "${INPUT_FILE}"
}

main() {
  if [[ ${#} -ne 2 ]]; then
    printf "Usage: %s INPUT_FILE CERT_FILE" "${0}"
    return 1
  fi

  local INPUT_FILE="${1}"
  shift

  local CERT_FILE="${1}"
  shift

  IFS='/' read -r -a identity <<<"$(yq eval '.metadata | .namespace + "/" + .name' "${INPUT_FILE}")"
  if [[ -z ${identity[1]:-} ]]; then
    return 1
  fi

  local NAMESPACE="${identity[0]}"
  local NAME="${identity[1]}"

  kubectl get secrets --namespace "${NAMESPACE}" "${NAME}" --output json | jq --compact-output --raw-output '.data | .[] |= @base64d | to_entries[]' | while read -r secret; do
    MANIFEST_VALUE="$(seal_content "$(printf '%s' "${secret}" | jq --raw-output '.value')")" update_manifest "$(printf '%s' "${secret}" | jq --raw-output '.key')"
  done
}

main "${@}"
