#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

release_clean() {
  printf "%bCleaning %s%b\n" "${BLUE}" "${OUTPUT_DIR}" "${RESET}"

  rm -rf "${OUTPUT_DIR}"
  mkdir "${OUTPUT_DIR}"
}

golang_build() {
  local SOURCE_DIR

  if [[ ${BUILD_WITH_DOCKER:-} == "true" ]]; then
    if ! command -v docker >/dev/null 2>&1; then
      printf "%bdocker not found%b\n" "${RED}" "${RESET}" 1>&2
      return
    fi

    SOURCE_DIR="/go/src/app/..."
    OUTPUT_DIR="/go/src/app/release"
  else
    if ! command -v go >/dev/null 2>&1; then
      printf "%bgo not found%b\n" "${RED}" "${RESET}" 1>&2
      return
    fi

    SOURCE_DIR="${ROOT_DIR}/..."
  fi

  (
    cd "${ROOT_DIR}"

    local OUTPUT_BINARIES
    mapfile -t OUTPUT_BINARIES < <(golang_go list -f '{{ .Dir }} {{ .Name }}' "${SOURCE_DIR}" | grep "main" | awk '{print $1}')

    local TARGETS=('darwin/amd64' 'linux/amd64' 'linux/arm' 'linux/arm64')

    for main in "${OUTPUT_BINARIES[@]}"; do
      local NAME
      NAME="$(basename "${main}")"

      for OS_ARCH in "${TARGETS[@]}"; do
        IFS='/' read -r -a context <<<"${OS_ARCH}"

        (
          export GOOS="${context[0]}"
          export GOARCH="${context[1]}"
          export CGO_ENABLED="0"
          printf "%bBuilding binary %s to %s%b\n" "${BLUE}" "${NAME}_${GOOS}_${GOARCH}" "${OUTPUT_DIR}" "${RESET}"
          golang_go build -ldflags="-s -w" -installsuffix nocgo -o "${OUTPUT_DIR}/${NAME}_${GOOS}_${GOARCH}" "${main}"
        )
      done
    done
  )
}

docker_build() {
  if ! command -v docker >/dev/null 2>&1; then
    printf "%bdocker not found%b\n" "${RED}" "${RESET}" 1>&2
    return
  fi

  local DOCKER_ARCHS=('linux/amd64' 'linux/arm' 'linux/arm64')

  var_read DOCKER_IMAGE
  var_read IMAGE_VERSION
  var_read DOCKERFILE "Dockerfile"

  local DOCKER_MANIFEST_ARGS=()
  export DOCKER_CLI_EXPERIMENTAL="enabled"
  export DOCKER_BUILDKIT="1"

  for PLATFORM in ${DOCKER_ARCHS[*]}; do
    IFS='/' read -r -a context <<<"${PLATFORM}"
    local OS="${context[0]}"
    local ARCH="${context[1]}"
    local BUILT_IMAGE="${DOCKER_IMAGE}:${IMAGE_VERSION}-${OS}-${ARCH}"

    printf "%bBuilding and pushing image for %s%b\n" "${BLUE}" "${PLATFORM}" "${RESET}"
    docker build -f "${DOCKERFILE}" -t "${BUILT_IMAGE}" --build-arg "VERSION=${IMAGE_VERSION}" --platform "${PLATFORM}" "."
    docker push "${BUILT_IMAGE}"

    DOCKER_MANIFEST_ARGS+=("${BUILT_IMAGE}")
  done

  printf "%bCreating docker manifest for %s%b\n" "${BLUE}" "${DOCKER_IMAGE}:${IMAGE_VERSION}" "${RESET}"
  docker manifest create "${DOCKER_IMAGE}:${IMAGE_VERSION}" "${DOCKER_MANIFEST_ARGS[@]}"

  for DOCKER_ARCH in ${DOCKER_ARCHS[*]}; do
    IFS='/' read -r -a context <<<"${DOCKER_ARCH}"
    local OS="${context[0]}"
    local ARCH="${context[1]}"

    docker manifest annotate "${DOCKER_IMAGE}:${IMAGE_VERSION}" "${DOCKER_IMAGE}:${IMAGE_VERSION}-${OS}-${ARCH}" --arch "${ARCH}" --os "${OS}"
  done

  docker manifest push "${DOCKER_IMAGE}:${IMAGE_VERSION}"
}

release() {
  if [[ $(git_is_inside) != "true" ]]; then
    printf "%bnot inside a git tree%b\n" "${YELLOW}" "${RESET}"
    return 1
  fi

  printf "%bIdentifying semver%b\n" "${BLUE}" "${RESET}"
  var_read VERSION_REF "HEAD"
  var_read PREVIOUS_REF "$(git tag --sort=-creatordate | grep -v "${VERSION_REF}" | head -1)"

  local CHANGELOG
  CHANGELOG=$(git_changelog "${VERSION_REF}" "${PREVIOUS_REF}")
  printf "%bCHANGELOG:%b\n\n%s%b\n\n" "${YELLOW}" "${GREEN}" "${CHANGELOG}" "${RESET}"

  local VERSION_TYPE="patch"
  if [[ ${CHANGELOG} =~ \#\ BREAKING\ CHANGES ]]; then
    VERSION_TYPE="major"
  elif [[ ${CHANGELOG} =~ \#\ Features ]]; then
    VERSION_TYPE="minor"
  fi

  printf "%bRelease seems to be a %b%s%b\n" "${BLUE}" "${YELLOW}" "${VERSION_TYPE}" "${RESET}"
  printf "%bSpecify explicit git tag or major|minor|patch for semver increment%b\n" "${BLUE}" "${RESET}"
  var_read VERSION "${VERSION_TYPE}" ""

  local GIT_TAG
  if [[ ${VERSION} =~ (major|minor|patch) ]]; then
    GIT_TAG="$(version_semver "${VERSION}" "${VERSION_REF}" "quiet")"
  else
    GIT_TAG="${VERSION}"
  fi

  var_read GITHUB_OAUTH_TOKEN "" "secret"
  var_read GITHUB_REPOSITORY "$(git_remote_repository)"
  var_read RELEASE_NAME "${GIT_TAG}"

  printf "%bCreating release %s for %s...%b\n" "${BLUE}" "${GIT_TAG}" "${GITHUB_REPOSITORY}" "${RESET}"

  local HTTP_OUTPUT="http_output.txt"
  local HTTP_STATUS

  local CLIENT_ARGS=("curl" "-q" "-sSL" "--max-time" "300" "-o" "${HTTP_OUTPUT}" "-w" "%{http_code}" "-H" "Authorization: token ${GITHUB_OAUTH_TOKEN}")

  HTTP_STATUS="$("${CLIENT_ARGS[@]}" \
    -H "Content-Type: application/json" \
    -X POST \
    "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases" \
    -d "{
      \"tag_name\": \"${GIT_TAG}\",
      \"target_commitish\": \"$(git rev-parse "${VERSION_REF}")\",
      \"name\": \"${RELEASE_NAME}\",
      \"body\": \"$(echo "${CHANGELOG}" | sed 's|"|'"'"'|g' | awk '{printf "%s\\n", $0}')\"
    }")"

  if [[ ${HTTP_STATUS} != "201" ]]; then
    printf "%bUnable to create release%b\n" "${RED}" "${RESET}" 1>&2
    printf "%bHTTP/%s%b\n" "${RED}" "${HTTP_STATUS}" "${RESET}" 1>&2
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    exit 1
  fi

  if [[ -d ${OUTPUT_DIR} ]]; then
    local RESPONSE_URL
    RESPONSE_URL="$(jq -r .upload_url "${HTTP_OUTPUT}" | sed 's|{.*||')"
    rm "${HTTP_OUTPUT}"

    for asset in "${OUTPUT_DIR}"/*; do
      printf "%bUploading asset %s%b\n" "${BLUE}" "${asset}" "${RESET}"

      HTTP_STATUS="$(
        "${CLIENT_ARGS[@]}" \
          -H "Content-Type: application/x-executable" \
          -X POST \
          "${RESPONSE_URL}?name=$(basename "${asset}")" \
          --data-binary "@${asset}"
      )"

      if [[ ${HTTP_STATUS} != "201" ]]; then
        printf "%bUnable to upload asset %s%b\n" "${RED}" "${asset}" "${RESET}" 1>&2
        printf "%bHTTP/%s%b\n" "${RED}" "${HTTP_STATUS}" "${RESET}" 1>&2
        cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
        exit 1
      fi

      rm "${HTTP_OUTPUT}"
    done
  fi

  printf "%bâœ” Done!%b\n" "${GREEN}" "${RESET}"
}

release_usage() {
  printf "Usage of %s\n" "${0}"
  printf "clean\n\tClean output dir %s\n" "${OUTPUT_DIR}"
  printf "build\n\tBuild artifacts\n"
  printf "docker\n\tBuild docker images\n"
  printf "release\n\tCreate GitHub release and upload output dir content\n"
}

main() {
  local SCRIPT_DIR
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

  source "${SCRIPT_DIR}/meta" && meta_init "var" "git" "version" "golang"
  var_color

  local ROOT_DIR
  ROOT_DIR="$(git_root)"

  local OUTPUT_DIR="${ROOT_DIR}/release"

  for arg in "${@}"; do
    case "${arg}" in
    "build")
      release_clean

      if [[ -f "${ROOT_DIR}/go.mod" ]]; then
        golang_build
      fi
      ;;

    "docker")
      docker_build
      ;;

    "release")
      release
      ;;

    "clean")
      release_clean
      ;;

    *)
      release_usage
      ;;
    esac
  done
}

DEFAULT_ARGS=("build" "release" "clean")
main "${@:-${DEFAULT_ARGS[@]}}"
