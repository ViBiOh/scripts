#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

release_clean() {
  printf "%bCleaning %s%b\n" "${BLUE}" "${OUTPUT_DIR}" "${RESET}"

  rm -rf "${OUTPUT_DIR}"
  mkdir "${OUTPUT_DIR}"
}

build() {
  if [[ ${#} -ne 2 ]]; then
    printf "%bUsage: build [BINARY_NAME] [MAIN_SOURCE]%b\n" "${RED}" "${RESET}"
    return 1
  fi

  local TARGETS=('darwin/amd64' 'linux/amd64' 'linux/arm' 'linux/arm64')

  for OS_ARCH in "${TARGETS[@]}"; do
    IFS='/' read -ra context <<< "${OS_ARCH}"

    local GOOS="${context[0]}"
    local GOARCH="${context[1]}"

    (
      export GOOS="${GOOS}"
      export GOARCH="${GOARCH}"
      export CGO_ENABLED=0
      printf "%bBuilding binary %s to %s%b\n" "${BLUE}" "${1}_${GOOS}_${GOARCH}" "${OUTPUT_DIR}" "${RESET}"
      go build -ldflags="-s -w" -installsuffix nocgo -o "${OUTPUT_DIR}/${1}_${GOOS}_${GOARCH}" "${2}"
    )
  done
}

get_release_body() {
  local PREVIOUS_TAG
  PREVIOUS_TAG=$(git tag --sort=-creatordate | grep -v "${GIT_TAG}" | head -n 1)

  git log --no-merges --pretty=format:'%h %s' "${GIT_TAG}...${PREVIOUS_TAG}" | awk '!a[substr($0,8)]++' | awk '{printf "* %s\\n",$0}'
}

release() {
  var_read GITHUB_OAUTH_TOKEN "" "secret"
  var_read GITHUB_REPOSITORY "$(git_remote_repository)"
  var_read GIT_TAG "$(git_last_tag)"
  var_read RELEASE_NAME "${GIT_TAG}"

  printf "%bCreating release %s for %s...%b\n" "${BLUE}" "${GIT_TAG}" "${GITHUB_REPOSITORY}" "${RESET}"

  local HTTP_OUTPUT="http_output.txt"
  local HTTP_STATUS

  local BODY
  BODY=$(git_changelog "${GIT_TAG}" "$(git tag --sort=-creatordate | grep -v "${GIT_TAG}" | head -1)" | sed 's|"|'"'"'|g')
  printf "%b%s%b\n" "${GREEN}" "${BODY}" "${RESET}"

  local CLIENT_ARGS=("curl" "-q" "-sSL" "--max-time" "300" "-o" "${HTTP_OUTPUT}" "-w" "%{http_code}" "-H" "Authorization: token ${GITHUB_OAUTH_TOKEN}")

  HTTP_STATUS="$("${CLIENT_ARGS[@]}" \
    -H "Content-Type: application/json" \
    -X POST \
    "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases" \
    -d "{
      \"tag_name\": \"${GIT_TAG}\",
      \"name\": \"${RELEASE_NAME}\",
      \"body\": \"${BODY}\"
    }")"

  if [[ ${HTTP_STATUS} != "201" ]]; then
    printf "%bFailed to create release%b\n" "${RED}" "${RESET}"
    printf "%bHTTP/%s%b\n" "${RED}" "${HTTP_STATUS}" "${RESET}"
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    exit 1
  fi

  local RESPONSE_URL
  RESPONSE_URL=$(python -c "import json; data = json.load(open('${HTTP_OUTPUT}')); print(data['upload_url']);" | sed 's|{.*||')
  rm "${HTTP_OUTPUT}"

  for asset in "${OUTPUT_DIR}"/*; do
    printf "%bUploading asset %s%b\n" "${BLUE}" "${asset}" "${RESET}"

    HTTP_STATUS="$("${CLIENT_ARGS[@]}" \
      -H "Content-Type: application/x-executable" \
      -X POST \
      "${RESPONSE_URL}?name=$(basename "${asset}")" \
      --data-binary "@${asset}"
    )"

    if [[ ${HTTP_STATUS} != "201" ]]; then
      printf "%bFailed to upload asset %s%b\n" "${RED}" "${asset}" "${RESET}"
      printf "%bHTTP/%s%b\n" "${RED}" "${HTTP_STATUS}" "${RESET}"
      cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
      exit 1
    fi

    rm "${HTTP_OUTPUT}"
  done

  printf "%bâœ” Done!%b\n" "${GREEN}" "${RESET}"
}

release_usage() {
  printf "Usage of %s\n" "${0}"
  printf "clean\n\tClean output dir %s\n" "${OUTPUT_DIR}"
  printf "build\n\tBuild binary for %s\n" "${OUTPUT_BINARIES[*]}"
  printf "release\n\tCreate GitHub release and upload output dir content\n"
}

main() {
  local SCRIPT_DIR
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

  source "${SCRIPT_DIR}/meta" && meta_init "var" "git"
  var_color

  local ROOT_DIR
  ROOT_DIR="$(git_root)"

  local OUTPUT_DIR="${ROOT_DIR}/release"

  local OUTPUT_BINARIES
  mapfile -t OUTPUT_BINARIES < <(go list -f '{{ .Dir }} {{ .Name }}' "${ROOT_DIR}/..." | grep "main" | awk '{print $1}')

  for arg in "${@}"; do
    case "${arg}" in
      "build")
        release_clean
        for main in "${OUTPUT_BINARIES[@]}"; do
          build "$(basename "${main}")" "${main}"
        done
        ;;
      "release")
        release
        ;;
      "clean")
        release_clean
        ;;
      *)
        release_usage
        ;;
    esac
  done
}

DEFAULT_ARGS=("build" "release" "clean")
main "${@:-${DEFAULT_ARGS[@]}}"
