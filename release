#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

script_dir() {
  local FILE_SOURCE="${BASH_SOURCE[0]}"

  if [[ -L ${FILE_SOURCE} ]]; then
    dirname "$(readlink "${FILE_SOURCE}")"
  else
    (
      cd "$(dirname "${FILE_SOURCE}")" && pwd
    )
  fi
}

release_clean() {
  var_info "Cleaning ${OUTPUT_DIR}"

  rm -rf "${OUTPUT_DIR:?}"
  mkdir "${OUTPUT_DIR}"
}

golang_build() {
  local SOURCE_DIR

  if [[ ${BUILD_WITH_DOCKER:-} == "true" ]]; then
    if ! command -v docker >/dev/null 2>&1; then
      var_error "docker not found"
      return 1
    fi

    SOURCE_DIR="/go/src/app/..."
    OUTPUT_DIR="/go/src/app/release"
  else
    if ! command -v go >/dev/null 2>&1; then
      var_error "go not found"
      return 1
    fi

    SOURCE_DIR="${ROOT_DIR}/..."
  fi

  (
    cd "${ROOT_DIR}"

    local OUTPUT_BINARIES
    mapfile -t OUTPUT_BINARIES < <(golang_go list -f '{{ .Dir }} {{ .Name }}' "${SOURCE_DIR}" | grep "main" | awk '{print $1}')

    local GO_ARCHS="${GO_ARCHS:-darwin/amd64 darwin/arm64 linux/amd64 linux/arm linux/arm64}"

    for main in "${OUTPUT_BINARIES[@]}"; do
      local NAME
      NAME="$(basename "${main}")"

      for OS_ARCH in ${GO_ARCHS[*]}; do
        IFS='/' read -r -a context <<<"${OS_ARCH}"

        (
          export GOOS="${context[0]}"
          export GOARCH="${context[1]}"
          export CGO_ENABLED="0"
          var_info "Building binary ${NAME}_${GOOS}_${GOARCH} to ${OUTPUT_DIR}"
          golang_go build -ldflags="-s -w" -installsuffix nocgo -o "${OUTPUT_DIR}/${NAME}_${GOOS}_${GOARCH}" "${main}"
        )
      done
    done
  )
}

docker_dependencies() {
  docker run -v "$(pwd):/tmp/" --rm "alpine" /bin/sh -c 'apk --update add tzdata ca-certificates zip && cd /usr/share/zoneinfo/ && zip -q -r -0 /tmp/zoneinfo.zip . && cp /etc/ssl/certs/ca-certificates.crt /tmp/ca-certificates.crt'
}

docker_build() {
  if ! command -v docker >/dev/null 2>&1; then
    var_error "docker not found"
    return 1
  fi

  local DOCKER_ARCHS="${DOCKER_ARCHS:-linux/amd64 linux/arm linux/arm64}"

  var_read DOCKER_IMAGE
  var_read IMAGE_VERSION
  var_read DOCKERFILE "Dockerfile"

  local DOCKER_MANIFEST_ARGS=()
  export DOCKER_CLI_EXPERIMENTAL="enabled"
  export DOCKER_BUILDKIT="1"

  for PLATFORM in ${DOCKER_ARCHS[*]}; do
    IFS='/' read -r -a context <<<"${PLATFORM}"
    local OS="${context[0]}"
    local ARCH="${context[1]}"
    local BUILT_IMAGE="${DOCKER_IMAGE}:${IMAGE_VERSION}-${OS}-${ARCH}"

    var_info "Building and pushing image for ${PLATFORM}"
    docker build --file "${DOCKERFILE}" --tag "${BUILT_IMAGE}" --build-arg "VERSION=${IMAGE_VERSION}" --platform "${PLATFORM}" "."
    docker push "${BUILT_IMAGE}"

    DOCKER_MANIFEST_ARGS+=("${BUILT_IMAGE}")
  done

  var_info "Creating docker manifest for ${DOCKER_IMAGE}:${IMAGE_VERSION}"
  docker manifest create "${DOCKER_IMAGE}:${IMAGE_VERSION}" "${DOCKER_MANIFEST_ARGS[@]}"

  for DOCKER_ARCH in ${DOCKER_ARCHS[*]}; do
    IFS='/' read -r -a context <<<"${DOCKER_ARCH}"
    local OS="${context[0]}"
    local ARCH="${context[1]}"

    docker manifest annotate "${DOCKER_IMAGE}:${IMAGE_VERSION}" "${DOCKER_IMAGE}:${IMAGE_VERSION}-${OS}-${ARCH}" --arch "${ARCH}" --os "${OS}"
  done

  docker manifest push "${DOCKER_IMAGE}:${IMAGE_VERSION}"
}

release() {
  if ! git_is_inside; then
    var_warning "not inside a git tree"
    return 1
  fi

  var_info "Identifying semver"
  var_read VERSION_REF "HEAD"
  var_read PREVIOUS_REF "$(git tag --sort=-creatordate | grep --invert-match "${VERSION_REF}" | head -1)"

  local CHANGELOG
  CHANGELOG=$(git_changelog "${VERSION_REF}" "${PREVIOUS_REF}")
  printf "%bCHANGELOG:%b\n\n%s%b\n\n" "${YELLOW}" "${GREEN}" "${CHANGELOG}" "${RESET}"

  local VERSION_TYPE="patch"
  if [[ ${CHANGELOG} =~ \#\ BREAKING\ CHANGES ]]; then
    VERSION_TYPE="major"
  elif [[ ${CHANGELOG} =~ \#\ Features ]]; then
    VERSION_TYPE="minor"
  fi

  printf "%bRelease seems to be a %b%s%b\n" "${BLUE}" "${YELLOW}" "${VERSION_TYPE}" "${RESET}"
  var_info "Specify explicit git tag or major|minor|patch for semver increment"
  var_read VERSION "${VERSION_TYPE}" ""

  local GIT_TAG
  if [[ ${VERSION} =~ (major|minor|patch) ]]; then
    GIT_TAG="$(version_semver "${VERSION}" "${VERSION_REF}" "quiet")"
  else
    GIT_TAG="${VERSION}"
  fi

  var_read GITHUB_TOKEN "" "secret"
  var_read GITHUB_REPOSITORY "$(git_remote_repository)"
  var_read RELEASE_NAME "${GIT_TAG}"

  var_info "Creating release ${GIT_TAG} for ${GITHUB_REPOSITORY}..."

  http_init_client --header "Authorization: token ${GITHUB_TOKEN}"
  HTTP_CLIENT_ARGS+=("--max-time" "120")

  local PAYLOAD
  PAYLOAD="$(jq -c -n \
    --arg tag "${GIT_TAG}" \
    --arg target "$(git rev-parse "${VERSION_REF}")" \
    --arg name "${RELEASE_NAME}" \
    --arg body "${CHANGELOG}" \
    '{tag_name: $tag, target_commitish: $target, name: $name, body: $body}')"

  http_request --header "Content-Type: application/json" --request "POST" "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases" --data "${PAYLOAD}"
  if [[ ${HTTP_STATUS} != "201" ]]; then
    http_handle_error "Unable to create release"
    return 1
  fi

  if [[ -d ${OUTPUT_DIR} ]]; then
    local RESPONSE_URL
    RESPONSE_URL="$(jq -r .upload_url "${HTTP_OUTPUT}" | sed 's|{.*||')"
    rm "${HTTP_OUTPUT}"

    for asset in "${OUTPUT_DIR}"/*; do
      var_info "Uploading asset ${asset}"

      http_request --header "Content-Type: application/x-executable" --request POST "${RESPONSE_URL}?name=$(basename "${asset}")" --data-binary "@${asset}"
      if [[ ${HTTP_STATUS} != "201" ]]; then
        http_handle_error "Unable to upload asset ${asset}"
        return 1
      fi

      rm "${HTTP_OUTPUT}"
    done
  fi

  var_success "${GITHUB_REPOSITORY}@${RELEASE_NAME} created!"
}

release_usage() {
  printf "Usage of %s\n" "${0}"
  printf "clean\n\tClean output dir %s\n" "${OUTPUT_DIR}"
  printf "build\n\tBuild artifacts\n"
  printf "docker\n\tBuild docker images\n"
  printf "release\n\tCreate GitHub release and upload output dir content\n"
}

main() {
  source "$(script_dir)/meta" && meta_init "var" "http" "git" "version" "golang"
  var_color

  local ROOT_DIR
  ROOT_DIR="$(git_root)"

  local OUTPUT_DIR="${ROOT_DIR}/release"

  for arg in "${@}"; do
    case "${arg}" in
    "build")
      release_clean

      if [[ -f "${ROOT_DIR}/go.mod" ]]; then
        golang_build
      fi
      ;;

    "docker")
      docker_dependencies
      docker_build
      ;;

    "release")
      release
      ;;

    "clean")
      release_clean
      ;;

    *)
      release_usage
      ;;
    esac
  done
}

DEFAULT_ARGS=("build" "release" "clean")
main "${@:-${DEFAULT_ARGS[@]}}"
