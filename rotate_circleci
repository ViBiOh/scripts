#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

if [[ ${TRACE:-0} == "1" ]]; then
  set -o xtrace
fi

var_read() {
  if [[ ${#} -lt 1 ]]; then
    var_red "Usage: var_read VAR_NAME [VAR_DEFAULT] [VAR_SECRET]"
    return 1
  fi

  local VAR_NAME="${1}"
  shift
  local VAR_DEFAULT="${1-}"
  shift || true
  local VAR_SECRET="${1-}"
  shift || true

  local VAR_SECRET_ARG=""
  if [[ ${VAR_SECRET-} == "secret" ]]; then
    VAR_SECRET_ARG="-s"
  fi

  local VAR_DEFAULT_DISPLAY=""
  if [[ -n ${VAR_DEFAULT} ]]; then
    if [[ ${VAR_SECRET-} == "secret" ]]; then
      VAR_DEFAULT_DISPLAY=" [*****]"
    else
      VAR_DEFAULT_DISPLAY=" [${VAR_DEFAULT}]"
    fi
  fi

  if [[ -z ${!VAR_NAME-} ]]; then
    if [[ -z ${SCRIPTS_NO_INTERACTIVE-} ]]; then
      read ${VAR_SECRET_ARG?} -r -p "${VAR_NAME}${VAR_DEFAULT_DISPLAY}=" READ_VALUE </dev/tty
    fi

    local VAR_SAFE_VALUE
    VAR_SAFE_VALUE="$(printf "%s" "${READ_VALUE:-${VAR_DEFAULT}}" | sed "s|'|\\\'|g")"
    eval "${VAR_NAME}=$'${VAR_SAFE_VALUE}'"

    if [[ ${VAR_SECRET_ARG} == "-s" ]]; then
      printf "\n" 1>&2
    fi
  elif [[ ${VAR_SECRET_ARG} != "-s" ]]; then
    printf "%s=%s\n" "${VAR_NAME}" "${!VAR_NAME}" 1>&2
  else
    printf "Using secret %s\n" "${VAR_NAME}" 1>&2
  fi
}

github_clean_deploy_key() {
  local GITHUB_API="https://api.github.com/repos"

  local GITHUB_HTTP_STATUS=""
  local GITHUB_HTTP_OUTPUT
  GITHUB_HTTP_OUTPUT="$(mktemp)"

  local GITHUB_TOKEN
  GITHUB_TOKEN="$(github_token)"

  GITHUB_HTTP_STATUS="$(
    curl \
      --disable \
      --silent \
      --show-error \
      --location \
      --max-time 10 \
      --output "${GITHUB_HTTP_OUTPUT}" \
      --write-out "%{http_code}" \
      --header "Authorization: Bearer ${GITHUB_TOKEN}" \
      "${GITHUB_API}/${1}/keys"
  )"
  if [[ ${GITHUB_HTTP_STATUS} != "200" ]]; then
    printf "%bUnable to list Github deploy keys%b\n" "${RED}" "${RESET}"
    printf "HTTP/%s\n" "${GITHUB_HTTP_STATUS}"
    cat "${GITHUB_HTTP_OUTPUT}"
    return 1
  fi

  for key in $(jq --raw-output '.[] | .id' "${GITHUB_HTTP_OUTPUT}"); do
    GITHUB_HTTP_STATUS="$(
      curl \
        --disable \
        --silent \
        --show-error \
        --location \
        --max-time 10 \
        --output "${GITHUB_HTTP_OUTPUT}" \
        --write-out "%{http_code}" \
        --header "Authorization: Bearer ${GITHUB_TOKEN}" \
        --request "DELETE" \
        "${GITHUB_API}/${1}/keys/${key}"
    )"
    if [[ ${GITHUB_HTTP_STATUS} != "204" ]]; then
      printf "%bUnable to delete Github deploy key %s%b\n" "${RED}" "${key}" "${RESET}"
      printf "HTTP/%s\n" "${GITHUB_HTTP_STATUS}"
      cat "${GITHUB_HTTP_OUTPUT}"
      return 1
    fi
  done

  rm -f "${GITHUB_HTTP_OUTPUT}"
}

circleci_clean_checkout_key() {
  local CIRCLECI_API="https://circleci.com/api/v2/project/gh"

  local CIRCLECI_HTTP_STATUS=""
  local CIRCLECI_HTTP_OUTPUT
  CIRCLECI_HTTP_OUTPUT="$(mktemp)"

  CIRCLECI_HTTP_STATUS="$(
    curl \
      --disable \
      --silent \
      --show-error \
      --location \
      --max-time 10 \
      --output "${CIRCLECI_HTTP_OUTPUT}" \
      --write-out "%{http_code}" \
      --header "Circle-Token: ${CIRCLECI_TOKEN}" \
      "${CIRCLECI_API}/${1}/checkout-key"
  )"
  if [[ ${CIRCLECI_HTTP_STATUS} != "200" ]]; then
    printf "%bUnable to list CircleCI checkout keys%b\n" "${RED}" "${RESET}"
    printf "HTTP/%s\n" "${CIRCLECI_HTTP_STATUS}"
    cat "${CIRCLECI_HTTP_OUTPUT}"
    return 1
  fi

  for key in $(jq --raw-output '.items[] | .fingerprint' "${CIRCLECI_HTTP_OUTPUT}"); do
    CIRCLECI_HTTP_STATUS="$(
      curl \
        --disable \
        --silent \
        --show-error \
        --location \
        --max-time 10 \
        --output "${CIRCLECI_HTTP_OUTPUT}" \
        --write-out "%{http_code}" \
        --header "Circle-Token: ${CIRCLECI_TOKEN}" \
        --request "DELETE" \
        "${CIRCLECI_API}/${1}/checkout-key/${key}"
    )"
    if [[ ${CIRCLECI_HTTP_STATUS} != "200" ]]; then
      printf "%bUnable to delete CircleCI checkout key %s%b\n" "${RED}" "${key}" "${RESET}"
      printf "HTTP/%s\n" "${CIRCLECI_HTTP_STATUS}"
      cat "${CIRCLECI_HTTP_OUTPUT}"
      return 1
    fi
  done

  CIRCLECI_HTTP_STATUS="$(
    curl \
      --disable \
      --silent \
      --show-error \
      --location \
      --max-time 10 \
      --output "${CIRCLECI_HTTP_OUTPUT}" \
      --write-out "%{http_code}" \
      --header "Circle-Token: ${CIRCLECI_TOKEN}" \
      --request "POST" \
      --header "Content-Type: application/json" \
      --data '{"type": "deploy-key"}' \
      "${CIRCLECI_API}/${1}/checkout-key"
  )"
  if [[ ${CIRCLECI_HTTP_STATUS} != "201" ]]; then
    printf "%bUnable to create CircleCI deploy key%b\n" "${RED}" "${RESET}"
    printf "HTTP/%s\n" "${CIRCLECI_HTTP_STATUS}"
    cat "${CIRCLECI_HTTP_OUTPUT}"
    return 1
  fi

  rm -f "${CIRCLECI_HTTP_OUTPUT}"
}

main() {
  if [[ ${#} -lt 2 ]]; then
    printf "%bUsage: %s ORGANIZATION REPOSITORY%b\n" "${RED}" "${0}" "${RESET}"
    return 1
  fi

  local ORGANIZATION="${1}"
  shift

  local REPOSITORY="${1}"
  shift

  github_clean_deploy_key "${ORGANIZATION}/${REPOSITORY}"
  circleci_clean_checkout_key "${ORGANIZATION}/${REPOSITORY}"
}

main "${@}"
