#!/usr/bin/env bash

_kubernetes_scripts_init() {
  return 0
}

kubernetes_redis_cli() {
  _info() {
    printf -- "%b%b%b\n" "${BLUE}" "${*}" "${RESET}" 1>&2
  }

  local CONTEXT
  CONTEXT="$(kubectl config get-contexts -o name | fzf --height=20 --ansi --reverse --select-1 --query="${1-}" --prompt "Context: ")"

  if [[ -z ${CONTEXT-} ]]; then
    return 1
  fi

  _info "Context: ${CONTEXT}"

  local NAMESPACE
  NAMESPACE="$(kubectl --context "${CONTEXT}" get namespaces --output=yaml | yq eval '.items[].metadata.name' | fzf --height=20 --ansi --reverse --select-1 --query="${2-}" --prompt "Namespace: ")"

  if [[ -z ${NAMESPACE-} ]]; then
    return 1
  fi

  _info "Namespace: ${NAMESPACE}"

  local ENDPOINT
  ENDPOINT="$(kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" get endpoints --output=yaml | yq eval '.items[].metadata.name' | fzf --height=20 --ansi --reverse --select-1 --query="${3-}" --prompt "Endpoint: ")"

  if [[ -z ${ENDPOINT-} ]]; then
    return 1
  fi

  _info "Endpoint: ${ENDPOINT}"

  local AUTH_SECRET
  AUTH_SECRET="$(kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" get secrets --output=yaml | yq eval '.items[].metadata.name' | fzf --height=20 --ansi --reverse --select-1 --query="${3-}" --prompt "Secret: ")"

  _info "Secret: ${AUTH_SECRET}"

  local AUTH_PASS

  if [[ -n ${AUTH_SECRET-} ]]; then
    AUTH_PASS="$(kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" get secrets "${AUTH_SECRET}" --output=yaml | yq eval '.data[] |= @base64d | .data' | fzf --height=20 --ansi --reverse --select-1 --prompt "Auth: " | awk '{print $2}')"

    if [[ -z ${AUTH_PASS-} ]]; then
      return 1
    fi
  fi

  local POD_NAME="redis-cli"

  if [[ $(kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" get pod "${POD_NAME}" 2>/dev/null | wc -l) -eq 0 ]]; then
    _info "Creating a redis-cli pod"

    cat <<EOF | kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: ${POD_NAME}
  namespace: ${NAMESPACE}
  labels:
    app.kubernetes.io/name: kubernetes-redis-cli
    app.kubernetes.io/instance: ${POD_NAME}
spec:
  containers:
    - name: cli
      image: dbcliorg/iredis
      command:
        - /bin/sh
      args:
        - "-c"
        - "tail -f /dev/null"
EOF

    _info "Waiting for Running condition..."
    kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" wait --for=jsonpath='{.status.phase}'=Running "pod/${POD_NAME}"
  fi

  _info "Connecting to the ${POD_NAME} pod..."
  kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" exec "${POD_NAME}" --stdin --tty -- iredis -h "${ENDPOINT}" --password "${AUTH_PASS}" || true

  _info "Deleting the ${POD_NAME} pod..."
  kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" delete pod "${POD_NAME}"
}

kubernetes_shell() {
  _info() {
    printf -- "%b%b%b\n" "${BLUE}" "${*}" "${RESET}" 1>&2
  }

  _read_input() {
    if [[ ${#} -lt 2 ]]; then
      var_red "Usage: var_read_input VAR_PROMPT VAR_NAME"
      return 1
    fi

    local VAR_PROMPT="${1}"
    shift

    local VAR_NAME="${1}"
    shift

    if [[ -n ${BASH_VERSION} ]]; then
      read -r -p "${VAR_PROMPT}" "${@}" "${VAR_NAME}" </dev/tty
    elif [[ -n ${ZSH_VERSION} ]]; then
      read -r "${VAR_NAME}?${VAR_PROMPT}" "${@}" </dev/tty
    else
      var_error "Shell not supported for reading user input"
      return 1
    fi
  }

  local CONTEXT
  CONTEXT="$(kubectl config get-contexts -o name | fzf --height=20 --ansi --reverse --select-1 --query="${1-}" --prompt "Context: ")"

  if [[ -z ${CONTEXT-} ]]; then
    return 1
  fi

  _info "Context: ${CONTEXT}"

  local NAMESPACE
  NAMESPACE="$(kubectl --context "${CONTEXT}" get namespaces --output=yaml | yq eval '.items[].metadata.name' | fzf --height=20 --ansi --reverse --select-1 --query="${2-}" --prompt "Namespace: ")"

  if [[ -z ${NAMESPACE-} ]]; then
    return 1
  fi

  _info "Namespace: ${NAMESPACE}"

  local POD_NAME
  POD_NAME="$(whoami)-shell"

  if [[ $(kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" get pod "${POD_NAME}" 2>/dev/null | wc -l) -eq 0 ]]; then
    _info "Creating a shell pod"

    local IMAGE
    IMAGE="$(printf -- "alpine\nubuntu\nnode\npython\nother" | fzf --height=20 --ansi --reverse --select-1 --query="${3-}" --prompt "Image: ")"

    if [[ -z ${IMAGE:-} ]] || [[ ${IMAGE:-} == "other" ]]; then
      IMAGE="${4-}"

      if [[ -z ${IMAGE:-} ]]; then
        _read_input "Image name: " IMAGE
      fi
    fi

    cat <<EOF | kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: ${POD_NAME}
  namespace: ${NAMESPACE}
  labels:
    app.kubernetes.io/name: kubernetes-shell
    app.kubernetes.io/owner: $(whoami)
    app.kubernetes.io/instance: ${POD_NAME}
spec:
  containers:
    - name: shell
      image: ${IMAGE}
      command:
        - /bin/sh
      args:
        - "-c"
        - "tail -f /dev/null"
EOF

    _info "Waiting for Running condition..."
    kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" wait --for=jsonpath='{.status.phase}'=Running "pod/${POD_NAME}"
  fi

  _info "Connecting to the ${POD_NAME} pod..."
  kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" exec "${POD_NAME}" --stdin --tty -- "/bin/sh" || true

  _info "Deleting the ${POD_NAME} pod..."
  kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" delete pod "${POD_NAME}"
}

kubernetes_sql_forward() {
  _print_and_run() {
    printf -- "%b%s%b\n" "${YELLOW}" "${*}" "${RESET}" 1>&2
    eval "${*}"
  }

  _info() {
    printf -- "%b%b%b\n" "${BLUE}" "${*}" "${RESET}" 1>&2
  }

  _find_port() {
    local START_INDEX=3
    local POSSIBLE_PORTS="9876543"

    local DATABASE_PORT="${1-5432}"

    while nc -z "127.0.0.1" "${DATABASE_PORT}" >/dev/null 2>&1; do
      if [[ ${START_INDEX} -lt 0 ]]; then
        return 1
      fi

      DATABASE_PORT="${POSSIBLE_PORTS:START_INDEX:4}"

      START_INDEX=$((START_INDEX - 1))
    done

    printf -- "%s" "${DATABASE_PORT}"
  }

  local CONTEXT
  CONTEXT="$(kubectl config get-contexts --output name | fzf --height=20 --ansi --reverse --select-1 --query="${1-}" --prompt "Context: ")"

  if [[ -z ${CONTEXT-} ]]; then
    return 1
  fi

  _info "Context: ${CONTEXT}"

  local POD
  POD="$(kubectl --context "${CONTEXT}" get --all-namespaces pods --output yaml | yq eval '.items[] | select(.status.phase == "Running") | .metadata.namespace + "/" + .metadata.name' | fzf --height=20 --ansi --reverse --select-1 --query="${2-}" --prompt "Pod: ")"

  if [[ -z ${POD-} ]]; then
    return 1
  fi

  _info "Pod: ${POD}"

  local NAMESPACE
  NAMESPACE="$(printf '%s' "${POD}" | awk -F '/' '{ print $1 }')"

  local NAME
  NAME="$(printf '%s' "${POD}" | awk -F '/' '{ print $2 }')"

  local EXPOSED_PORT="5432"
  EXPOSED_PORT="$(_find_port "${EXPOSED_PORT}")"

  _print_and_run kubectl --context "${CONTEXT}" port-forward --namespace "${NAMESPACE}" "pod/${NAME}" --address "127.0.0.1" "${EXPOSED_PORT}:${3:-5432}"
}

kubernetes_postgres_backup() {
  meta_check "var"

  local POSTGRES_USER
  var_shift_or_read POSTGRES_USER "${1-}"
  shift || true

  local POSTGRES_DB
  var_shift_or_read POSTGRES_DB "${1-}"
  shift || true

  local BACKUP_FILE
  var_shift_or_read BACKUP_FILE "${1-}"
  shift || true

  local CONTEXT
  CONTEXT="$(kubectl config get-contexts --output name | fzf --height=20 --ansi --reverse --select-1 --query="${1-}" --prompt "Context: ")"

  if [[ -z ${CONTEXT-} ]]; then
    return 1
  fi

  local POSTGRES_POD
  POSTGRES_POD="$(kubectl --context "${CONTEXT}" get pods --output name | fzf --height=20 --ansi --reverse --prompt "Pod: ")"

  if [[ -z ${POSTGRES_POD-} ]]; then
    return 1
  fi

  if [[ -n ${POSTGRES_POD} ]]; then
    kubectl --context "${CONTEXT}" exec --tty "${POSTGRES_POD}" -- pg_dump --format=c --user "${POSTGRES_USER}" --dbname "${POSTGRES_DB}" >"${BACKUP_FILE}"
  fi
}

kubernetes_postgres_restore() {
  meta_check "var"

  local POSTGRES_USER
  var_shift_or_read POSTGRES_USER "${1-}"
  shift || true

  local POSTGRES_DB
  var_shift_or_read POSTGRES_DB "${1-}"
  shift || true

  local CONTEXT
  CONTEXT="$(kubectl config get-contexts --output name | fzf --height=20 --ansi --reverse --select-1 --query="${1-}" --prompt "Context: ")"

  if [[ -z ${CONTEXT-} ]]; then
    return 1
  fi

  local BACKUP_FILE
  BACKUP_FILE="$(
    if command -v rg >/dev/null 2>&1; then
      export FZF_DEFAULT_COMMAND='rg --files --sortr path 2> /dev/null'
    fi
    fzf --height=20 --ansi --reverse --query "${POSTGRES_DB}"
  )"

  if [[ -z ${BACKUP_FILE-} ]]; then
    return 1
  fi

  local POSTGRES_POD
  POSTGRES_POD="$(kubectl --context "${CONTEXT}" get pods --output name | fzf --height=20 --ansi --reverse --prompt "Pod: ")"

  if [[ -z ${POSTGRES_POD-} ]]; then
    return 1
  fi

  if [[ -n ${POSTGRES_POD} ]]; then
    kubectl --context "${CONTEXT}" exec --tty --stdin "${POSTGRES_POD}" -- pg_restore --format=c --user "${POSTGRES_USER}" --dbname "${POSTGRES_DB}" <"${BACKUP_FILE}"
  fi
}

docker_postgres_restore() {
  meta_check "var"

  local POSTGRES_USER
  var_shift_or_read POSTGRES_USER "${1-}"
  shift || true

  local POSTGRES_DB
  var_shift_or_read POSTGRES_DB "${1-}"
  shift || true

  local BACKUP_FILE
  BACKUP_FILE="$(
    if command -v rg >/dev/null 2>&1; then
      export FZF_DEFAULT_COMMAND='rg --files --sortr path 2> /dev/null'
    fi
    fzf --height=20 --ansi --reverse --query "${POSTGRES_DB}"
  )"

  if [[ -z ${BACKUP_FILE-} ]]; then
    return 1
  fi

  var_print_and_run "docker exec --interactive postgres -- pg_restore --format=c --user '${POSTGRES_USER}' --dbname '${POSTGRES_DB}' <'${BACKUP_FILE}'"
}
