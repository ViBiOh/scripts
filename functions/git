#!/usr/bin/env bash

_git_scripts_init() {
  meta_check "var"

  if [[ ${BASH_VERSINFO:-3} -gt "3" ]]; then
    declare -gA CONVENTIONAL_COMMIT_SCOPES
    CONVENTIONAL_COMMIT_SCOPES['build']='Changes that affect the build system or external dependencies'
    CONVENTIONAL_COMMIT_SCOPES['chore']='Changes in the core of the repository'
    CONVENTIONAL_COMMIT_SCOPES['ci']='Changes in Continuous Integration configuration files and scripts'
    CONVENTIONAL_COMMIT_SCOPES['docs']='Documentation only changes'
    CONVENTIONAL_COMMIT_SCOPES['feat']=$(printf 'A new feature for user %b(production change)%b' "${RED}" "${RESET}")
    CONVENTIONAL_COMMIT_SCOPES['fix']=$(printf 'A bug fix for user %b(production change)%b' "${RED}" "${RESET}")
    CONVENTIONAL_COMMIT_SCOPES['perf']=$(printf 'A performance improvement for user %b(production change)%b' "${RED}" "${RESET}")
    CONVENTIONAL_COMMIT_SCOPES['refactor']=$(printf 'A change that is not a feature not a bug %b(production change)%b' "${RED}" "${RESET}")
    CONVENTIONAL_COMMIT_SCOPES['style']='A change that do not affect the meaning of the code'
    CONVENTIONAL_COMMIT_SCOPES['test']='A new test or correcting existing tests'
  fi
}

git_hooks_toggle() {
  if [[ ${SCRIPTS_NO_GIT_HOOKS:-} == "true" ]]; then
    var_info "Git hooks enabled"
    unset SCRIPTS_NO_GIT_HOOKS
  else
    var_info "Git hooks disabled"
    export SCRIPTS_NO_GIT_HOOKS="true"
  fi
}

git_hooks_toggle_config() {
  if ! git_is_inside; then
    return
  fi

  local CONFIG_NAME="${1}"
  shift

  local TOGGLE_INVERTED="${1:-false}"
  shift

  if [[ $(git config "${CONFIG_NAME}") == "true" ]]; then
    if [[ ${TOGGLE_INVERTED} == "true" ]]; then
      var_info "Disabling ${CONFIG_NAME}"
    else
      var_info "Enabling ${CONFIG_NAME}"
    fi

    git config --unset "${CONFIG_NAME}"
  else
    if [[ ${TOGGLE_INVERTED} == "true" ]]; then
      var_info "Enabling ${CONFIG_NAME}"
    else
      var_info "Disabling ${CONFIG_NAME}"
    fi

    git config "${CONFIG_NAME}" "true"
  fi
}

git_hooks_no_yaml_format() {
  git_hooks_toggle_config "hooks.noYamlFormat"
}

git_hooks_no_md_format() {
  git_hooks_toggle_config "hooks.noMarkdownFormat"
}

git_hooks_bazelle_gazelle() {
  git_hooks_toggle_config "hooks.bazelleGazelle" "true"
}

git_hooks_json_sort() {
  git_hooks_toggle_config "hooks.jsonSort" "true"
}

git_is_inside() {
  if [[ $(git rev-parse --is-inside-work-tree 2>&1) == "true" ]]; then
    return 0
  fi

  return 1
}

git_root() {
  if ! git_is_inside; then
    pwd
    return
  fi

  git rev-parse --show-toplevel
}

git_browse() {
  while IFS= read -r -d '' dir; do
    (
      cd "${dir}" || return
      if ! git_is_inside || [[ $(readlink -f "$(pwd)") != $(git_root) ]]; then
        return
      fi

      var_info "Running command in ${dir}"
      eval "${*}"
      var_success "${dir}"
    )
  done < <(find . -type d -maxdepth 1 -print0)
}

git_refresh() {
  if [[ ${#} -gt 0 ]]; then
    cd "${1}" || return 1
  fi

  if ! git_is_inside || [[ $(readlink -f "$(pwd)") != $(git_root) ]]; then
    return
  fi

  git default --quiet
  git pull --quiet
  git sweep
}

export -f git_refresh

git_pull_all() {
  parallel --bar git_refresh ::: *
}

git_remote_repository() {
  if ! git_is_inside; then
    return
  fi

  local REMOTE_URL
  REMOTE_URL="$(git remote get-url --push "$(git remote show | head -1)")"

  if [[ ${REMOTE_URL} =~ ^.*@.*:(.*)\/([^\.]*)(.git)?$ ]]; then
    printf -- "%s/%s" "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}"
  fi
}

git_is_merge_commit() {
  if [[ ${1} =~ Merge\ (pull\ request|branch) ]]; then
    return 0
  fi

  return 1
}

git_is_commit_wip() {
  if [[ ${1} =~ ^fixup\! ]]; then
    return 0
  fi

  local WIP_REGEX='\bwip\b'
  if [[ ${OSTYPE} =~ ^darwin ]]; then
    WIP_REGEX="[[:<:]]wip[[:>:]]"
  fi

  if [[ ${1} =~ ${WIP_REGEX} ]]; then
    return 0
  fi

  return 1
}

git_is_conventional_commit() {

  local SCOPES
  printf -v SCOPES "%s|" "${!CONVENTIONAL_COMMIT_SCOPES[@]}"
  SCOPES="${SCOPES%|}"

  shopt -s nocasematch
  if [[ ${1} =~ ^(revert:\ )?(${SCOPES})(\(.+\))?\!?:\ [a-zA-Z0-9\[\(]+ ]]; then
    return 0
  fi

  return 1
}

git_is_valid_description() {
  export COMMIT_MAX_LENGTH="70"

  if [[ ${#1} -gt ${COMMIT_MAX_LENGTH} ]]; then
    return 1
  fi

  return 0
}

git_conventional_commit_guidelines() {
  meta_check "var"

  var_warning "Guidelines for prefixing commit message from conventionalcommits.org\n"

  for prefix in "${!CONVENTIONAL_COMMIT_SCOPES[@]}"; do
    printf -- "%b%s%b(component)%b:%b\n" "${GREEN}" "${prefix}" "${BLUE}" "${GREEN}" "${RESET}"
    printf -- "\t%s\n" "${CONVENTIONAL_COMMIT_SCOPES[${prefix}]}"
  done

  var_warning "\n\nYou can add '!' before ':', for indicating breaking change"
  printf -- "\n\t%bfeat%b(api)%b!%b:%b Adding mandatory parameter on signup\n\n" "${GREEN}" "${BLUE}" "${RED}" "${GREEN}" "${RESET}"

  var_warning "\nYou can prefix with 'revert:' for indicating revert change"
  printf -- "\n\t%brevert: %bfeat%b(api)%b:%b Adding mandatory parameter on signup\n\n" "${RED}" "${GREEN}" "${BLUE}" "${GREEN}" "${RESET}"
}

git_valid_description_guideline() {
  meta_check "var"

  var_warning "\nYou have to use a short commit description (max ${COMMIT_MAX_LENGTH:-70} characters). Current size is ${#1}"
}

git_last_tag() {
  if ! git_is_inside; then
    var_warning "not inside a git tree"
    return 1
  fi

  if [[ $(git tag --list | wc -l) -eq 0 ]]; then
    return
  fi

  git describe --tags --abbrev=0 2>/dev/null
}

git_changelog() {
  meta_check "var"

  if [[ ${*} =~ ^-?help$ ]]; then
    var_red "Usage: git_changelog [END_REF=HEAD] [START_REF=git_last_tag]"
    return 1
  fi

  if ! git_is_inside; then
    var_warning "not inside a git tree"
    return 2
  fi

  local GIT_TO="${1:-HEAD}"
  shift || true
  local GIT_FROM="${1:-$(git_last_tag)}"
  shift || true

  local FEATURES=()
  local FIXES=()
  local MISC=()
  local BREAKING=()

  IFS=$'\n'

  local SCOPES
  printf -v SCOPES "%s|" "${!CONVENTIONAL_COMMIT_SCOPES[@]}"
  SCOPES="${SCOPES%|}"

  shopt -s nocasematch
  for hash in $(git log --no-merges --pretty=format:'%h' "${GIT_TO}...${GIT_FROM}"); do
    local VERSION_MESSAGE=""
    local HASH=""
    local TYPE=""
    local BREAK=""

    for line in $(git show --no-patch --format='%h %B' "${hash}" | grep --invert-match '^\s*$'); do
      if [[ ${line} =~ \[skip\ ci\]\ Automated ]]; then
        continue
      fi

      if [[ -z ${VERSION_MESSAGE} ]] && [[ ${line} =~ ^([0-9a-f]{1,16})\ (revert )?(${SCOPES})(\(.+\))?(\!)?:\ (.*)$ ]]; then
        HASH="${BASH_REMATCH[1]}"
        local REVERT="${BASH_REMATCH[2]}"
        TYPE="${BASH_REMATCH[3]}"
        local COMPONENT="${BASH_REMATCH[4]}"
        local CONTENT="${BASH_REMATCH[6]}"
        BREAK="${BASH_REMATCH[5]}"

        VERSION_MESSAGE="*"

        if [[ -n ${REVERT} ]]; then
          VERSION_MESSAGE+=" **reverted**"
        fi

        if [[ -n ${COMPONENT} ]]; then
          VERSION_MESSAGE+=" *${COMPONENT}*"
        fi

        VERSION_MESSAGE+=" ${CONTENT}"
      fi

      if [[ -z ${VERSION_MESSAGE} ]]; then
        break
      fi

      if [[ ${line} =~ ^BREAKING[-\ ]CHANGE:\ (.*)$ ]]; then
        BREAKING+=("* ${BASH_REMATCH[1]}")
        BREAK=""

        continue
      fi

      if [[ ${line} =~ ^((closes?)|(fix(ed)?))\ (#[0-9]+)$ ]]; then
        VERSION_MESSAGE+=" ${BASH_REMATCH[5]}"
        HASH=""

        continue
      fi
    done

    if [[ -n ${VERSION_MESSAGE} ]]; then
      if [[ -n ${HASH} ]]; then
        VERSION_MESSAGE+=" ${HASH}"
      fi

      if [[ ${TYPE} == "feat" ]]; then
        FEATURES+=("${VERSION_MESSAGE}")
      elif [[ ${TYPE} == "fix" ]]; then
        FIXES+=("${VERSION_MESSAGE}")
      else
        MISC+=("${VERSION_MESSAGE}")
      fi

      if [[ ${BREAK} == "!" ]]; then
        BREAKING+=("${VERSION_MESSAGE}")
      fi
    fi
  done

  if [[ ${#FEATURES[@]} -gt 0 ]]; then
    printf -- "# Features\n\n%s\n\n" "$(printf -- "%s\n" "${FEATURES[@]}")"
  fi

  if [[ ${#FIXES[@]} -gt 0 ]]; then
    printf -- "# Fixes\n\n%s\n\n" "$(printf -- "%s\n" "${FIXES[@]}")"
  fi

  if [[ ${#MISC[@]} -gt 0 ]]; then
    printf -- "# Miscellaneous\n\n%s\n\n" "$(printf -- "%s\n" "${MISC[@]}")"
  fi

  if [[ ${#BREAKING[@]} -gt 0 ]]; then
    printf -- "# BREAKING CHANGES\n\n%s\n\n" "$(printf -- "%s\n" "${BREAKING[@]}")"
  fi
}

head_sync() {
  meta_check "var"

  if [[ ${#} -ne 2 ]]; then
    var_red "Usage: head_sync REMOTE_SERVER REMOTE_PATH"
    return 1
  fi

  local REMOTE_SERVER="${1}"
  shift
  local REMOTE_PATH="${1}"
  shift

  local branch
  branch="$(git branch --show-current)"
  ssh -A "${REMOTE_SERVER}" "cd '${REMOTE_PATH}' && git reset HEAD . && git clean --force && git status --untracked-files --short | awk '{print \$2}' | xargs -r rm -rf && git checkout -- . && git fetch && git checkout '${branch}' && git pull"
}

git_sync() {
  meta_check "var"

  if [[ ${#} -lt 2 ]]; then
    var_red "Usage: git_sync REMOTE_SERVER REMOTE_PATH [DRY]?"
    return 1
  fi

  local REMOTE_SERVER="${1}"
  shift
  local REMOTE_PATH="${1}"
  shift
  local DRY="${1:-false}"
  shift || true

  git_root
  isGit=$?
  if [[ ${isGit} -ne 0 ]]; then
    return ${isGit}
  fi

  local REMOTE_PATH_PREFIX="~/${REMOTE_PATH}"
  if [[ ${REMOTE_PATH:0:1} == "/" ]]; then
    REMOTE_PATH_PREFIX="${REMOTE_PATH}"
  fi

  if [[ $(printf -- "%s" "${DRY-}" | tr "[:upper:]" "[:lower:]") == "dry" ]]; then
    DRY=true
  fi

  if [[ ${DRY} == true ]]; then
    var_info "Dry run of syncing files..."
  else
    var_info "Syncing files at $(date +'%H:%M:%S')..."
  fi

  declare -a toSync
  declare -a toDelete

  local IFS=$'\n'
  for gitFile in $(git status --porcelain); do
    local prefix="${gitFile:0:2}"
    local trimmedPrefix="${prefix#[[:space:]]}"

    case "${trimmedPrefix:0:1}" in
    "M" | "A" | "?")
      toSync+=("${gitFile:3}")
      ;;

    "D")
      toDelete+=("${REMOTE_PATH_PREFIX}/${gitFile:3}")
      ;;

    "R")
      local originFile
      originFile="$(printf -- "%s" "${gitFile}" | awk '{printf("%s", $2)}')"
      local destinationFile
      destinationFile="$(printf -- "%s" "${gitFile}" | awk '{printf("%s", $4)}')"

      toDelete+=("${REMOTE_PATH_PREFIX}/${originFile}")
      toSync+=("${destinationFile}")
      ;;

    *)
      var_info "¯\_(ツ)_/¯ Don't know how to handle ${gitFile}"
      ;;
    esac
  done

  if ! ${DRY}; then
    var_warning "Cleaning remote"
    ssh "${REMOTE_SERVER}" "cd ${REMOTE_PATH_PREFIX} && git clean --force && git checkout -- ."
  fi

  if [[ ${#toDelete[@]} -ne 0 ]]; then
    ! ${DRY} && ssh "${REMOTE_SERVER}" "rm -rf ${toDelete[*]}"
    var_red "- Deleted"
    var_red "${toDelete[*]}\n"
  fi

  if [[ ${#toSync[@]} -ne 0 ]]; then
    ! ${DRY} && rsync -raR "${toSync[@]}" "${REMOTE_SERVER}:${REMOTE_PATH_PREFIX}/"
    var_green "+ Copied"
    var_green "${toSync[*]}\n"
  fi

  var_info "Done at $(date +'%H:%M:%S')!"
  var_info ""
}

watch_sync() {
  if [[ -z ${NO_HEAD_SYNC-} ]]; then
    head_sync "${@}"
  fi

  git_sync "${@}"

  fswatch --print0 --one-per-batch --exclude=.git/ . | while read -r -d ""; do
    git_sync "${@}"
  done
}
