#!/usr/bin/env bash

GITHUB_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

github_clone_user() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  local HTTP_OUTPUT="http_output.txt"
  local CLIENT_ARGS=("curl" "-q" "-sSL" "--max-time" "10" "-o" "${HTTP_OUTPUT}" "-w" "%{http_code}" "-H" "Authorization: token ${GITHUB_OAUTH_TOKEN}")

  local HTTP_STATUS
  HTTP_STATUS="$("${CLIENT_ARGS[@]}" "-H" "Content-Type: application/json" "https://api.github.com/user/repos?type=owner&per_page=100")"
  if [[ ${HTTP_STATUS} != "200" ]]; then
    printf "%bUnable to list user repos%b\n" "${RED}" "${RESET}"
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  local REPOSITORIES
  IFS=" " read -r -a REPOSITORIES <<< "$(python -c "import json; repos = json.load(open('${HTTP_OUTPUT}')); print(' '.join([repo['name'] + ',' + repo['ssh_url'] for repo in repos if repo['archived'] == False]))")"
  rm "${HTTP_OUTPUT}"

  for REPO in "${REPOSITORIES[@]}"; do
    IFS=',' read -r -a details <<< "${REPO}"

    if [[ -d ${details[0]} ]]; then
      printf "%b%s already cloned%b\n" "${GREEN}" "${details[0]}" "${RESET}"
    else
      printf "%bCloning %s%b\n" "${BLUE}" "${details[0]}" "${RESET}"
      git clone "${details[1]}" "${details[0]}"
    fi
  done
}

github_compare_version() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  if [[ "${#}" -lt 2 ]]; then
    printf "%bUsage: github_compare_version owner/repo latest_version [current_version] [release_api_output_file]%b\n" "${RED}" "${RESET}"
    return 1
  fi

  if [[ -z ${3} ]]; then
    printf "%s" "${2}"
    rm "${4}"
    return
  fi

  if [[ ${3} == "${2}" ]]; then
    printf "%bâœ” %s is up to date %s%b\n" "${GREEN}" "${1}" "${2}" "${RESET}"
    rm "${4}"
    return
  fi

  local RELEASE_NOTES
  RELEASE_NOTES="$(python -c "import json; print(json.load(open('${4}'))['body'])")"
  rm "${4}"

  printf "%b%s%b: current version is %b%s%b, new version is %b%s%b %s%b\n" "${GREEN}" "${1}" "${BLUE}" "${RED}" "${3}" "${BLUE}" "${YELLOW}" "${2}" "${GREEN}" "https://github.com/${1}/releases/tag/${2}" "${RESET}"
  printf "%s\n" "${RELEASE_NOTES}"
}

github_last_release() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  if [[ ${#} -lt 1 ]]; then
    printf "%bUsage: github_last_release owner/repo [previous_version] %b\n" "${RED}" "${RESET}"
    return 1
  fi

  local HTTP_OUTPUT="http_output.txt"
  local CLIENT_ARGS=("curl" "-q" "-sSL" "--max-time" "10" "-o" "${HTTP_OUTPUT}" "-w" "%{http_code}")
  if [[ -n ${GITHUB_OAUTH_TOKEN:-} ]]; then
    CLIENT_ARGS+=("-H" "Authorization: token ${GITHUB_OAUTH_TOKEN}")
  fi

  local HTTP_STATUS
  HTTP_STATUS="$("${CLIENT_ARGS[@]}" "https://api.github.com/repos/${1}/releases/latest")"
  if [[ ${HTTP_STATUS} != "200" ]]; then
    printf "%bUnable to list latest release for %s%b\n" "${RED}" "${1}" "${RESET}"
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  github_compare_version "${1}" "$(python -c "import json; print(json.load(open('${HTTP_OUTPUT}'))['tag_name'])")" "${2:-}" "${HTTP_OUTPUT}"
}

github_configure() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  if [[ ${#} -ne 1 ]]; then
    printf "%bUsage: configure_repository owner/repo%b\n" "${RED}" "${RESET}"
    return 1
  fi

  local HTTP_OUTPUT="http_output.txt"
  local CLIENT_ARGS=("curl" "-q" "-sSL" "--max-time" "10" "-o" "${HTTP_OUTPUT}" "-w" "%{http_code}" "-H" "Authorization: token ${GITHUB_OAUTH_TOKEN}")

  local HTTP_STATUS
  HTTP_STATUS="$("${CLIENT_ARGS[@]}" "-H" "Content-Type: application/json" "-X" "PATCH" "https://api.github.com/repos/${1}" "-d" '{
    "default_branch": "master",
    "allow_merge_commit": false,
    "allow_squash_merge": true,
    "allow_rebase_merge": false,
    "delete_branch_on_merge": true,
    "has_wiki": false,
    "has_projects": false
  }')"
  if [[ ${HTTP_STATUS} != "200" ]]; then
    printf "%bUnable to edit ${1}%b\n" "${RED}" "${RESET}"
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  HTTP_STATUS="$("${CLIENT_ARGS[@]}" "-H" "Accept: application/vnd.github.dorian-preview+json" "-X" "PUT" "https://api.github.com/repos/${1}/vulnerability-alerts")"
  if [[ ${HTTP_STATUS} != "204" ]]; then
    printf "%bUnable to enable vulnerability alerts for ${1}%b\n" "${RED}" "${RESET}"
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  HTTP_STATUS="$("${CLIENT_ARGS[@]}" "-H" "Accept: application/vnd.github.london-preview+json" "-X" "PUT" "https://api.github.com/repos/${1}/automated-security-fixes")"
  if [[ ${HTTP_STATUS} != "204" ]]; then
    printf "%bUnable to enable automated security fixes for ${1}%b\n" "${RED}" "${RESET}"
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  HTTP_STATUS="$("${CLIENT_ARGS[@]}" "-H" "Accept: application/vnd.github.luke-cage-preview+json" "-X" "PUT" "https://api.github.com/repos/${1}/branches/master/protection" "-d" '{
    "allow_force_pushes": false,
    "allow_deletions": false,
    "enforce_admins": true,
    "required_linear_history": true,
    "required_pull_request_reviews": null,
    "required_status_checks": {
      "strict": true,
      "contexts": [
        "Branch is clean"
      ]
    },
    "restrictions": null
  }')"
  if [[ ${HTTP_STATUS} != "200" ]]; then
    printf "%bUnable to update branch protection ${1}%b\n" "${RED}" "${RESET}"
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  HTTP_STATUS="$("${CLIENT_ARGS[@]}" "-H" "Accept: application/vnd.github.zzzax-preview+json" "-X" "POST" "https://api.github.com/repos/${1}/branches/master/protection/required_signatures")"
  if [[ ${HTTP_STATUS} != "200" ]]; then
    printf "%bUnable to enable required signed commits for ${1}%b\n" "${RED}" "${RESET}"
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  rm "${HTTP_OUTPUT}"
}
