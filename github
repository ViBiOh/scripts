#!/usr/bin/env bash

GITHUB_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

github_rate_limit_wait() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var" "http"
  var_color

  local WANTED_CALLS="${1:-10}"

  http_init_client -H "Authorization: token ${GITHUB_OAUTH_TOKEN}"

  while true; do
    http_request -H "Accept: application/vnd.github.v3+json" "https://api.github.com/rate_limit"
    if [[ ${HTTP_STATUS} != "200" ]]; then
      http_handle_error "Unable to get rate limit"
      return
    fi

    remaining="$(jq -r '.resources.core.remaining' "${HTTP_OUTPUT}")"
    rm "${HTTP_OUTPUT}"
    if [[ ${remaining} -gt ${WANTED_CALLS} ]]; then
      return
    fi

    var_warning "Waiting 5 minutes for rate limit, need ${WANTED_CALLS} requests"
    sleep 300
  done
}

github_repo_pr_stats() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var" "http"
  var_color

  if [[ ${#} -ne 1 ]]; then
    var_error "Usage: github_repo_pr_stats owner/repo"
    return 1
  fi

  local GITHUB_REPOSITORY="${1:-}"
  var_read GITHUB_OAUTH_TOKEN "" "secret"

  http_init_client -H "Authorization: token ${GITHUB_OAUTH_TOKEN}"

  local pr_page=0
  local pr_page_size=100
  local pr_count="${pr_page_size}"

  local pr
  local prstats=""

  while [[ pr_count -eq ${pr_page_size} ]]; do
    pr_page=$((pr_page + 1))

    var_info "Fetching page ${pr_page} of ${GITHUB_REPOSITORY} pull-requests"

    github_rate_limit_wait
    http_request "https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls?state=closed&per_page=${pr_page_size}&page=${pr_page}"
    if [[ ${HTTP_STATUS} != "200" ]]; then
      http_handle_error "Unable to list ${GITHUB_REPOSITORY} pull-requests on page ${pr_page}"
      break
    fi

    pr_count="$(jq -r 'length' "${HTTP_OUTPUT}")"
    if [[ ${pr_count} -eq 0 ]]; then
      break
    fi

    local PULL_REQUESTS
    mapfile -t PULL_REQUESTS < <(jq -r '. [] | select(.merged_at != null) | select(.user.login != null) | (.number | tostring) + "," + .user.login' "${HTTP_OUTPUT}")
    rm "${HTTP_OUTPUT}"

    github_rate_limit_wait "${pr_page_size}"

    for PR in "${PULL_REQUESTS[@]}"; do
      IFS=',' read -r -a details <<<"${PR}"

      http_request "https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${details[0]}/reviews"
      if [[ ${HTTP_STATUS} != "200" ]]; then
        http_handle_error "Unable to fetch ${GITHUB_REPOSITORY}/pulls/${details[0]} reviews"
        break
      fi

      pr="$(jq -c -r --arg author "${details[1]}" '[.[] | select(.user.login != null) | .user.login] | {$author, reviewers: .}' "${HTTP_OUTPUT}")"
      if [[ -n ${pr:-} ]]; then
        if [[ -n ${prstats} ]]; then
          prstats+=","
        fi

        prstats+="${pr}"
      fi
    done
  done

  printf "[%s]" "${prstats}" | jq -c -r '
    [group_by(.author) | .[] | { author: (.[0].author), opened: length }] +
    [ [.[].reviewers] | flatten | group_by(.) | .[] | { author: .[0], reviewed: length}] |
    [reduce .[] as $o ({}; .[$o["author"] | tostring] += $o ) | .[]]'
}

github_repo_stats() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var" "http"
  var_color

  if [[ ${#} -ne 1 ]]; then
    var_error "Usage: github_repo_stats owner/repo"
    return 1
  fi

  local GITHUB_REPOSITORY=${1:-}
  var_read GITHUB_OAUTH_TOKEN "" "secret"

  http_init_client -H "Authorization: token ${GITHUB_OAUTH_TOKEN}"

  local retry="true"

  while [[ ${retry} == "true" ]]; do
    github_rate_limit_wait
    http_request "https://api.github.com/repos/${GITHUB_REPOSITORY}/stats/contributors"
    if [[ ${HTTP_STATUS} == "202" ]]; then
      var_warning "Contributions are being compiled for ${GITHUB_REPOSITORY}, waiting 30seconds"
      rm "${HTTP_OUTPUT}"
      sleep 30
      continue
    fi

    if [[ ${HTTP_STATUS} != "200" ]]; then
      http_handle_error "Unable to get contributors' stats for ${GITHUB_REPOSITORY}"
      return 1
    fi

    retry="false"

    local stats
    stats="$(jq -c -r --arg repo "${GITHUB_REPOSITORY}" \
      '{
        repository: $repo,
        contributors: [.[] | {author: .author.login, added: (reduce .weeks[] as $item (0; . + $item.a)), deleted: (reduce .weeks[] as $item (0; . + $item.d)), commits: (reduce .weeks[] as $item (0; . + $item.c))} | {author, added, deleted, commits, ratio: (.added - .deleted), mean_by_commit: ((.added - .deleted) / .commits) | floor }] | sort_by(.author)
      }' \
      "${HTTP_OUTPUT}")"
    rm "${HTTP_OUTPUT}"

    local prs
    prs="$(github_repo_pr_stats "${GITHUB_REPOSITORY}")"

    printf "%s\n%s" "${stats}" "${prs}" | jq -c -r -s '{
      repository: .[0].repository,
      contributors: ((.[0] | .contributors) + .[1] | [reduce .[] as $o ({}; .[$o["author"] | tostring] += $o ) | .[]] | sort_by(.author))
    }'
  done
}

github_org_stats() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var" "http"
  var_color

  if [[ ${#} -lt 1 ]]; then
    var_error "Usage: github_org_stats organization_name [repository_ignore_regex]"
    return 1
  fi

  local GITHUB_ORGANIZATION="${1:-}"
  local REPOSITORY_IGNORE="${2:-\$^}"
  var_read GITHUB_OAUTH_TOKEN "" "secret"

  http_init_client -H "Authorization: token ${GITHUB_OAUTH_TOKEN}"

  local repo_page=0
  local repo_page_size=100
  local repo_count="${repo_page_size}"

  local stat
  local orgstats=""

  while [[ repo_count -eq ${repo_page_size} ]]; do
    repo_page=$((repo_page + 1))

    github_rate_limit_wait
    http_request "https://api.github.com/orgs/${GITHUB_ORGANIZATION}/repos?per_page=${repo_page_size}&page=${repo_page}"
    if [[ ${HTTP_STATUS} != "200" ]]; then
      http_handle_error "Unable to list ${GITHUB_ORGANIZATION} repositories on page ${repo_page}"
      break
    fi

    repo_count="$(jq -r 'length' "${HTTP_OUTPUT}")"
    if [[ ${repo_count} -eq 0 ]]; then
      break
    fi

    local REPOSITORIES
    mapfile -t REPOSITORIES < <(jq -c -r --arg ignore "${REPOSITORY_IGNORE}" '.[] | select(.full_name | test($ignore) | not) | .full_name' "${HTTP_OUTPUT}")
    rm "${HTTP_OUTPUT}"

    for REPO in "${REPOSITORIES[@]}"; do
      var_info "Generating stats for ${REPO}"
      stat="$(github_repo_stats "${REPO}")"

      if [[ -n ${stat:-} ]]; then
        if [[ -n ${orgstats} ]]; then
          orgstats+=","
        fi

        orgstats+="${stat}"
      fi
    done
  done

  orgstats="[${orgstats}]"
  printf "%s\n" "${orgstats}"
}

github_org_stats_user() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  if [[ ${#} -ne 2 ]]; then
    var_error "Usage: github_org_stats_user github_org_stats.json user"
    return 1
  fi

  local FILENAME="${1:-}"
  local GITHUB_USER="${2:-}"

  local GITHUB_USER_STATS
  GITHUB_USER_STATS="$(jq -c -r --arg user "${GITHUB_USER}" '[.[] | {repository, contribution: .contributors[] | select(.author == $user)}] | sort_by(.contribution.ratio)' "${FILENAME}")"

  printf "%s\n" "${GITHUB_USER_STATS}"
  printf "%s" "${GITHUB_USER_STATS}" | jq '{added: (reduce .[].contribution as $contrib (0; . + $contrib.added)), deleted: (reduce .[].contribution as $contrib (0; . + $contrib.deleted)), commits: (reduce .[].contribution as $contrib (0; . + $contrib.commits)), opened: (reduce .[].contribution as $contrib (0; . + $contrib.opened)), reviewed: (reduce .[].contribution as $contrib (0; . + $contrib.reviewed))} | {added: .added, deleted: .deleted, commits: .commits, opened: .opened, reviewed: .reviewed, ratio: (.added - .deleted), mean_by_commit: ((.added - .deleted) / .commits) | floor}'
}

github_clone_user() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var" "http"
  var_color

  var_read GITHUB_OAUTH_TOKEN "" "secret"

  http_init_client -H "Authorization: token ${GITHUB_OAUTH_TOKEN}"

  local page=0
  local page_size=100
  local count="${page_size}"

  while [[ count -eq ${page_size} ]]; do
    page=$((page + 1))

    http_request -H "Content-Type: application/json" "https://api.github.com/user/repos?type=owner&per_page=${page_size}&page=${page}"
    if [[ ${HTTP_STATUS} != "200" ]]; then
      http_handle_error "Unable to list user repositories on page ${page}"
      break
    fi

    local REPOSITORIES
    mapfile -t REPOSITORIES < <(jq -r '.[] | select (.archived | not) | .name + "," + .ssh_url' "${HTTP_OUTPUT}")
    rm "${HTTP_OUTPUT}"

    count=0
    for REPO in "${REPOSITORIES[@]}"; do
      count=$((count + 1))

      IFS=',' read -r -a details <<<"${REPO}"

      if [[ -d ${details[0]} ]]; then
        var_success "${details[0]} already cloned"
      else
        var_info "Cloning ${details[0]}"
        git clone "${details[1]}" "${details[0]}"
      fi
    done
  done
}

github_compare_version() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  if [[ ${#} -lt 2 ]]; then
    var_error "Usage: github_compare_version owner/repo latest_version [current_version] [release_api_output_file]"
    return 1
  fi

  if [[ -z ${3} ]]; then
    printf "%s" "${2}"
    rm "${4}"
    return
  fi

  if [[ ${3} == "${2}" ]]; then
    var_success "âœ” ${1} is up to date ${2}"
    rm "${4}"
    return
  fi

  local RELEASE_NOTES
  RELEASE_NOTES="$(jq -r .body "${4}")"
  rm "${4}"

  printf "%b%s%b: current version is %b%s%b, new version is %b%s%b %s%b\n" "${GREEN}" "${1}" "${BLUE}" "${RED}" "${3}" "${BLUE}" "${YELLOW}" "${2}" "${GREEN}" "https://github.com/${1}/releases/tag/${2}" "${RESET}"
  printf "%s\n" "${RELEASE_NOTES}"
}

github_last_release() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var" "http"
  var_color

  if [[ ${#} -lt 1 ]]; then
    var_error "Usage: github_last_release owner/repo [previous_version]"
    return 1
  fi

  local GITHUB_REPOSITORY=${1:-}

  http_init_client
  if [[ -n ${GITHUB_OAUTH_TOKEN:-} ]]; then
    HTTP_CLIENT_ARGS+=("-H" "Authorization: token ${GITHUB_OAUTH_TOKEN}")
  fi

  http_request "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest"
  if [[ ${HTTP_STATUS} != "200" ]]; then
    http_handle_error "Unable to list latest release for ${GITHUB_REPOSITORY}"
    return 1
  fi

  github_compare_version "${GITHUB_REPOSITORY}" "$(jq -r '.tag_name' "${HTTP_OUTPUT}")" "${2:-}" "${HTTP_OUTPUT}"
}

github_configure() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var" "http"
  var_color

  if [[ ${#} -ne 1 ]]; then
    var_error "Usage: github_configure owner/repo"
    return 1
  fi

  local GITHUB_REPOSITORY=${1:-}

  http_init_client -H "Authorization: token ${GITHUB_OAUTH_TOKEN}"
  http_request -H "Content-Type: application/json" -X "PATCH" "https://api.github.com/repos/${GITHUB_REPOSITORY}" -d '{
    "default_branch": "master",
    "allow_merge_commit": false,
    "allow_squash_merge": false,
    "allow_rebase_merge": true,
    "delete_branch_on_merge": true,
    "has_wiki": false,
    "has_projects": false
  }'
  if [[ ${HTTP_STATUS} != "200" ]]; then
    http_handle_error "Unable to edit ${GITHUB_REPOSITORY}"
    return 1
  fi

  http_request -H "Accept: application/vnd.github.dorian-preview+json" -X "PUT" "https://api.github.com/repos/${GITHUB_REPOSITORY}/vulnerability-alerts"
  if [[ ${HTTP_STATUS} != "204" ]]; then
    http_handle_error "Unable to enable vulnerability alerts for ${GITHUB_REPOSITORY}"
    return 1
  fi

  http_request -H "Accept: application/vnd.github.london-preview+json" -X "PUT" "https://api.github.com/repos/${GITHUB_REPOSITORY}/automated-security-fixes"
  if [[ ${HTTP_STATUS} != "204" ]]; then
    http_handle_error "Unable to enable automated security fixes for ${GITHUB_REPOSITORY}"
    return 1
  fi

  http_request -H "Accept: application/vnd.github.luke-cage-preview+json" -X "PUT" "https://api.github.com/repos/${GITHUB_REPOSITORY}/branches/master/protection" -d '{
    "allow_force_pushes": false,
    "allow_deletions": false,
    "enforce_admins": false,
    "required_linear_history": true,
    "required_pull_request_reviews": null,
    "required_status_checks": {
      "strict": true,
      "contexts": [
        "Branch is clean"
      ]
    },
    "restrictions": null
  }'
  if [[ ${HTTP_STATUS} != "200" ]]; then
    http_handle_error "Unable to update branch protection for ${GITHUB_REPOSITORY}"
    return 1
  fi

  http_request -H "Accept: application/vnd.github.zzzax-preview+json" -X "POST" "https://api.github.com/repos/${GITHUB_REPOSITORY}/branches/master/protection/required_signatures"
  if [[ ${HTTP_STATUS} != "200" ]]; then
    http_handle_error "Unable to enable required signed commits for ${GITHUB_REPOSITORY}"
    return 1
  fi

  rm "${HTTP_OUTPUT}"
}
