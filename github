#!/usr/bin/env bash

GITHUB_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

github_last_release() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  if [[ ${#} -lt 1 ]]; then
    printf "%bUsage: github_last_release owner/repo [verbose] %b\n" "${RED}" "${RESET}"
    return 1
  fi

  local HTTP_OUTPUT="http_output.txt"
  local CLIENT_ARGS=("curl" "-q" "-sSL" "--max-time" "10" "-o" "${HTTP_OUTPUT}" "-w" "%{http_code}")

  local REQUEST_STATUS
  REQUEST_STATUS="$("${CLIENT_ARGS[@]}" "https://api.github.com/repos/${1}/releases/latest")"
  if [[ ${REQUEST_STATUS} != "200" ]]; then
    printf "%bUnable to list latest release for %s%b\n" "${RED}" "${1}" "${RESET}"
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  local RELEASE_VERSION
  RELEASE_VERSION="$(python -c "import json; print(json.load(open('${HTTP_OUTPUT}'))['tag_name'])")"

  if [[ -z ${2} ]]; then
    printf "%s" "${RELEASE_VERSION}"
    rm "${HTTP_OUTPUT}"
    return
  fi

  local RELEASE_NOTES
  RELEASE_NOTES="$(python -c "import json; print(json.load(open('${HTTP_OUTPUT}'))['body'])")"
  rm "${HTTP_OUTPUT}"

  printf "%bLast version of %b%s%b is %b%s%b %s%b\n" "${BLUE}" "${YELLOW}" "${1}" "${BLUE}" "${GREEN}" "${RELEASE_VERSION}" "${BLUE}" "https://github.com/${1}/releases/tag/${RELEASE_VERSION}" "${RESET}"
  printf "%s\n" "${RELEASE_NOTES}"
}

github_configure() {
  if [[ ${#} -ne 1 ]]; then
    printf "%bUsage: configure_repository owner/repo%b\n" "${RED}" "${RESET}"
    return 1
  fi

  local HTTP_OUTPUT="http_output.txt"
  local CLIENT_ARGS=("curl" "-q" "-sSL" "--max-time" "10" "-o" "${HTTP_OUTPUT}" "-w" "%{http_code}" "-H" "Authorization: token ${GITHUB_OAUTH_TOKEN}")

  local REQUEST_STATUS
  REQUEST_STATUS="$("${CLIENT_ARGS[@]}" "-H" "Content-Type: application/json" "-X" "PATCH" "https://api.github.com/repos/${1}" "-d" '{
    "default_branch": "master",
    "allow_merge_commit": false,
    "allow_squash_merge": false,
    "allow_rebase_merge": true,
    "has_wiki": false,
    "has_projects": false
  }')"
  if [[ ${REQUEST_STATUS} != "200" ]]; then
    printf "%bUnable to edit ${1}%b\n" "${RED}" "${RESET}"
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  REQUEST_STATUS="$("${CLIENT_ARGS[@]}" "-H" "Accept: application/vnd.github.dorian-preview+json" "-X" "PUT" "https://api.github.com/repos/${1}/vulnerability-alerts")"
  if [[ ${REQUEST_STATUS} != "204" ]]; then
    printf "%bUnable to enable vulnerability alerts for ${1}%b\n" "${RED}" "${RESET}"
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  REQUEST_STATUS="$("${CLIENT_ARGS[@]}" "-H" "Accept: application/vnd.github.london-preview+json" "-X" "PUT" "https://api.github.com/repos/${1}/automated-security-fixes")"
  if [[ ${REQUEST_STATUS} != "204" ]]; then
    printf "%bUnable to enable automated security fixes for ${1}%b\n" "${RED}" "${RESET}"
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  rm "${HTTP_OUTPUT}"
}
