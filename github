#!/usr/bin/env bash

GITHUB_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

github_repo_stats() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  if [[ ${#} -ne 1 ]]; then
    printf "%bUsage: github_repo_stats owner/repo%b\n" "${RED}" "${RESET}" 1>&2
    return 1
  fi

  local GITHUB_REPOSITORY=${1:-}
  var_read GITHUB_OAUTH_TOKEN "" "secret"

  local HTTP_OUTPUT="http_output.txt"
  local CLIENT_ARGS=("curl" "-q" "-sSL" "--max-time" "10" "-o" "${HTTP_OUTPUT}" "-w" "%{http_code}" "-H" "Authorization: token ${GITHUB_OAUTH_TOKEN}")
  local HTTP_STATUS

  HTTP_STATUS="$("${CLIENT_ARGS[@]}" "https://api.github.com/repos/${GITHUB_REPOSITORY}/stats/contributors")"
  if [[ ${HTTP_STATUS} == "202" ]]; then
    printf "%bContributions are being compiled for %b%s%b, come back in a few moments%b\n" "${YELLOW}" "${GREEN}" "${GITHUB_REPOSITORY}" "${YELLOW}" "${RESET}" 1>&2
    rm "${HTTP_OUTPUT}"
    return
  elif [[ ${HTTP_STATUS} != "200" ]]; then
    printf "%bUnable to get contributors' stats for %s%b\n" "${RED}" "${GITHUB_REPOSITORY}" "${RESET}" 1>&2
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  jq -c -r --arg repo "${GITHUB_REPOSITORY}" \
    '[.[] | {author: .author.login, added: (reduce .weeks[] as $item (0; . + $item.a)), deleted: (reduce .weeks[] as $item (0; . + $item.d)), commits: (reduce .weeks[] as $item (0; . + $item.c))}] | {repository: $repo, contributors: .}' \
    "${HTTP_OUTPUT}"
  rm "${HTTP_OUTPUT}"
}

github_org_stats() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  if [[ ${#} -ne 1 ]]; then
    printf "%bUsage: github_org_stats organization_name%b\n" "${RED}" "${RESET}" 1>&2
    return 1
  fi

  local GITHUB_ORGANIZATION="${1:-}"
  var_read GITHUB_OAUTH_TOKEN "" "secret"

  local HTTP_OUTPUT="http_output.txt"
  local CLIENT_ARGS=("curl" "-q" "-sSL" "--max-time" "10" "-o" "${HTTP_OUTPUT}" "-w" "%{http_code}" "-H" "Authorization: token ${GITHUB_OAUTH_TOKEN}")
  local HTTP_STATUS

  local page=0
  local page_size=100
  local count="${page_size}"

  local stat
  local output=""

  while [[ count -eq ${page_size} ]]; do
    page=$((page + 1))

    HTTP_STATUS="$("${CLIENT_ARGS[@]}" "https://api.github.com/orgs/${GITHUB_ORGANIZATION}/repos?per_page=${page_size}&page=${page}")"
    if [[ ${HTTP_STATUS} != "200" ]]; then
      printf "%bUnable to list organizations repos of %s for page %s%b\n" "${RED}" "${GITHUB_ORGANIZATION}" "${page}" "${RESET}" 1>&2
      cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
      return
    fi

    local REPOSITORIES
    mapfile -t REPOSITORIES < <(jq -r '.[] | .full_name' "${HTTP_OUTPUT}")
    rm "${HTTP_OUTPUT}"

    count=0
    for REPO in "${REPOSITORIES[@]}"; do
      count=$((count + 1))

      printf "%bGenerating stats for %b%s%b\n" "${BLUE}" "${GREEN}" "${REPO}" "${RESET}" 1>&2
      stat="$(github_repo_stats "${REPO}")"

      if [[ -n ${stat:-} ]]; then
        if [[ -n ${output} ]]; then
          output+=","
        fi

        output+="${stat}"
      fi
    done
  done

  output="[${output}]"
  printf "%s\n" "${output}"
}

github_org_stats_user() {
  if [[ ${#} -ne 2 ]]; then
    printf "%bUsage: github_org_stats_user github_org_stats.json user%b\n" "${RED}" "${RESET}" 1>&2
    return 1
  fi

  local FILENAME="${1:-}"
  local GITHUB_USER="${2:-}"

  local GITHUB_USER_STATS
  GITHUB_USER_STATS="$(jq -c -r --arg user "${GITHUB_USER}" '[.[] | {repository, contribution: .contributors[] | select(.author == $user)}] | sort_by(.contribution.commits)' "${FILENAME}")"

  printf "%s\n" "${GITHUB_USER_STATS}"

  printf "%s" "${GITHUB_USER_STATS}" | jq '{added: (reduce .[].contribution as $contrib (0; . + $contrib.added)), deleted: (reduce .[].contribution as $contrib (0; . + $contrib.deleted)), commits: (reduce .[].contribution as $contrib (0; . + $contrib.commits))} | {added: .added, deleted: .deleted, commits: .commits, ratio: (.added - .deleted), mean_by_commit: ((.added - .deleted) / .commits) | floor}'
}

github_clone_user() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  var_read GITHUB_OAUTH_TOKEN "" "secret"

  local HTTP_OUTPUT="http_output.txt"
  local CLIENT_ARGS=("curl" "-q" "-sSL" "--max-time" "10" "-o" "${HTTP_OUTPUT}" "-w" "%{http_code}" "-H" "Authorization: token ${GITHUB_OAUTH_TOKEN}")

  local HTTP_STATUS
  HTTP_STATUS="$("${CLIENT_ARGS[@]}" "-H" "Content-Type: application/json" "https://api.github.com/user/repos?type=owner&per_page=100")"
  if [[ ${HTTP_STATUS} != "200" ]]; then
    printf "%bUnable to list user repos%b\n" "${RED}" "${RESET}" 1>&2
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  local REPOSITORIES
  mapfile -t REPOSITORIES < <(jq -r '.[] | select (.archived | not) | .name + "," + .ssh_url' "${HTTP_OUTPUT}")
  rm "${HTTP_OUTPUT}"

  for REPO in "${REPOSITORIES[@]}"; do
    IFS=',' read -r -a details <<<"${REPO}"

    if [[ -d ${details[0]} ]]; then
      printf "%b%s already cloned%b\n" "${GREEN}" "${details[0]}" "${RESET}"
    else
      printf "%bCloning %s%b\n" "${BLUE}" "${details[0]}" "${RESET}"
      git clone "${details[1]}" "${details[0]}"
    fi
  done
}

github_compare_version() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  if [[ ${#} -lt 2 ]]; then
    printf "%bUsage: github_compare_version owner/repo latest_version [current_version] [release_api_output_file]%b\n" "${RED}" "${RESET}" 1>&2
    return 1
  fi

  if [[ -z ${3} ]]; then
    printf "%s" "${2}"
    rm "${4}"
    return
  fi

  if [[ ${3} == "${2}" ]]; then
    printf "%bâœ” %s is up to date %s%b\n" "${GREEN}" "${1}" "${2}" "${RESET}"
    rm "${4}"
    return
  fi

  local RELEASE_NOTES
  RELEASE_NOTES="$(jq -r .body "${4}")"
  rm "${4}"

  printf "%b%s%b: current version is %b%s%b, new version is %b%s%b %s%b\n" "${GREEN}" "${1}" "${BLUE}" "${RED}" "${3}" "${BLUE}" "${YELLOW}" "${2}" "${GREEN}" "https://github.com/${1}/releases/tag/${2}" "${RESET}"
  printf "%s\n" "${RELEASE_NOTES}"
}

github_last_release() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  if [[ ${#} -lt 1 ]]; then
    printf "%bUsage: github_last_release owner/repo [previous_version] %b\n" "${RED}" "${RESET}" 1>&2
    return 1
  fi

  local HTTP_OUTPUT="http_output.txt"
  local CLIENT_ARGS=("curl" "-q" "-sSL" "--max-time" "10" "-o" "${HTTP_OUTPUT}" "-w" "%{http_code}")
  if [[ -n ${GITHUB_OAUTH_TOKEN:-} ]]; then
    CLIENT_ARGS+=("-H" "Authorization: token ${GITHUB_OAUTH_TOKEN}")
  fi

  local HTTP_STATUS
  HTTP_STATUS="$("${CLIENT_ARGS[@]}" "https://api.github.com/repos/${1}/releases/latest")"
  if [[ ${HTTP_STATUS} != "200" ]]; then
    printf "%bUnable to list latest release for %s%b\n" "${RED}" "${1}" "${RESET}" 1>&2
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  github_compare_version "${1}" "$(jq -r .tag_name "${HTTP_OUTPUT}")" "${2:-}" "${HTTP_OUTPUT}"
}

github_configure() {
  source "${GITHUB_SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  if [[ ${#} -ne 1 ]]; then
    printf "%bUsage: configure_repository owner/repo%b\n" "${RED}" "${RESET}" 1>&2
    return 1
  fi

  local HTTP_OUTPUT="http_output.txt"
  local CLIENT_ARGS=("curl" "-q" "-sSL" "--max-time" "10" "-o" "${HTTP_OUTPUT}" "-w" "%{http_code}" "-H" "Authorization: token ${GITHUB_OAUTH_TOKEN}")

  local HTTP_STATUS
  HTTP_STATUS="$("${CLIENT_ARGS[@]}" "-H" "Content-Type: application/json" "-X" "PATCH" "https://api.github.com/repos/${1}" "-d" '{
    "default_branch": "master",
    "allow_merge_commit": false,
    "allow_squash_merge": false,
    "allow_rebase_merge": true,
    "delete_branch_on_merge": true,
    "has_wiki": false,
    "has_projects": false
  }')"
  if [[ ${HTTP_STATUS} != "200" ]]; then
    printf "%bUnable to edit ${1}%b\n" "${RED}" "${RESET}" 1>&2
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  HTTP_STATUS="$("${CLIENT_ARGS[@]}" "-H" "Accept: application/vnd.github.dorian-preview+json" "-X" "PUT" "https://api.github.com/repos/${1}/vulnerability-alerts")"
  if [[ ${HTTP_STATUS} != "204" ]]; then
    printf "%bUnable to enable vulnerability alerts for ${1}%b\n" "${RED}" "${RESET}" 1>&2
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  HTTP_STATUS="$("${CLIENT_ARGS[@]}" "-H" "Accept: application/vnd.github.london-preview+json" "-X" "PUT" "https://api.github.com/repos/${1}/automated-security-fixes")"
  if [[ ${HTTP_STATUS} != "204" ]]; then
    printf "%bUnable to enable automated security fixes for ${1}%b\n" "${RED}" "${RESET}" 1>&2
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  HTTP_STATUS="$("${CLIENT_ARGS[@]}" "-H" "Accept: application/vnd.github.luke-cage-preview+json" "-X" "PUT" "https://api.github.com/repos/${1}/branches/master/protection" "-d" '{
    "allow_force_pushes": false,
    "allow_deletions": false,
    "enforce_admins": false,
    "required_linear_history": true,
    "required_pull_request_reviews": null,
    "required_status_checks": {
      "strict": true,
      "contexts": [
        "Branch is clean"
      ]
    },
    "restrictions": null
  }')"
  if [[ ${HTTP_STATUS} != "200" ]]; then
    printf "%bUnable to update branch protection ${1}%b\n" "${RED}" "${RESET}" 1>&2
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  HTTP_STATUS="$("${CLIENT_ARGS[@]}" "-H" "Accept: application/vnd.github.zzzax-preview+json" "-X" "POST" "https://api.github.com/repos/${1}/branches/master/protection/required_signatures")"
  if [[ ${HTTP_STATUS} != "200" ]]; then
    printf "%bUnable to enable required signed commits for ${1}%b\n" "${RED}" "${RESET}" 1>&2
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  rm "${HTTP_OUTPUT}"
}
