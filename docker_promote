#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

main() {
  local SCRIPT_DIR
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

  source "${SCRIPT_DIR}/meta" && meta_init "var" "http"
  var_color

  local DOCKER_REGISTRY="https://registry-1.docker.io/v2"
  local DOCKER_AUTH_TOKEN="https://auth.docker.io/token?service=registry.docker.io"

  if [[ ${#} -lt 2 ]]; then
    ver_error "Usage: ${0} DOCKER_IMAGE IMAGE_VERSION [VERSION_TARGET]"
    return 1
  fi

  var_read DOCKER_USER
  var_read DOCKER_PASS "" "secret"

  local DOCKER_IMAGE="${1}"
  shift
  local IMAGE_VERSION="${1}"
  shift
  local VERSION_TARGET="${1:-latest}"
  shift || true

  http_init_client

  var_info "Getting token from ${DOCKER_AUTH_TOKEN} for pulling and pushing to ${DOCKER_IMAGE}..."

  http_request -X GET "${DOCKER_AUTH_TOKEN}&scope=repository:${DOCKER_IMAGE}:pull,push" -u "${DOCKER_USER}:${DOCKER_PASS}"
  unset DOCKER_PASS

  if [[ ${HTTP_STATUS} != "200" ]]; then
    http_handle_error "Unable to retrieve token for ${DOCKER_IMAGE}"
    return 1
  fi

  HTTP_CLIENT_ARGS+=("-H" "Authorization: Bearer $(jq -r .token "${HTTP_OUTPUT}")")
  rm "${HTTP_OUTPUT}"

  var_info "Tagging image ${DOCKER_IMAGE} from ${IMAGE_VERSION} to ${VERSION_TARGET}..."

  local MANIFEST_ACCEPT=("application/vnd.docker.distribution.manifest.list.v2+json" "application/vnd.docker.distribution.manifest.v2+json")
  for manifest in "${MANIFEST_ACCEPT[@]}"; do
    var_warning "Trying with manifest ${manifest}"

    # Getting manifest
    http_request -X GET "${DOCKER_REGISTRY}/${DOCKER_IMAGE}/manifests/${IMAGE_VERSION}" -H "Accept: ${manifest}"
    if [[ ${HTTP_STATUS} != "200" ]]; then
      http_handle_error "Unable to retrieve manifest for ${DOCKER_IMAGE}"
      return 1
    fi

    local MANIFEST_PAYLOAD
    MANIFEST_PAYLOAD="$(cat "${HTTP_OUTPUT}")"
    rm "${HTTP_OUTPUT}"

    # Promoting image
    http_request -X PUT "${DOCKER_REGISTRY}/${DOCKER_IMAGE}/manifests/${VERSION_TARGET}" \
      -H "Content-Type: ${manifest}" \
      -d "${MANIFEST_PAYLOAD}"
    if [[ ${HTTP_STATUS} != "201" ]]; then
      http_handle_error "Unable to promote manifest for ${DOCKER_IMAGE}"
      continue
    fi

    var_success "âœ” Image promoted to latest"
    rm "${HTTP_OUTPUT}"
    return
  done
}

main "${@:-}"
