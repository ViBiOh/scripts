#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

main() {
  local SCRIPT_DIR
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

  source "${SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  local DOCKER_REGISTRY="https://registry-1.docker.io/v2"
  local DOCKER_AUTH_TOKEN="https://auth.docker.io/token?service=registry.docker.io"

  if [[ ${#} -lt 2 ]]; then
    printf "%bUsage: ${0} [IMAGE_NAME] [IMAGE_VERSION] [VERSION_TARGET]%b\n" "${RED}" "${RESET}"
    return 1
  fi

  var_read DOCKER_USER
  var_read DOCKER_PASS "" "secret"

  local HTTP_OUTPUT="http_output.txt"
  local HTTP_STATUS

  local CLIENT_ARGS=("curl" "-q" "-sSL" "--max-time" "10" "-o" "${HTTP_OUTPUT}" "-w" "%{http_code}")

  printf "%bGetting token from %s for pulling and pushing to %s...%b\n" "${BLUE}" "${DOCKER_AUTH_TOKEN}" "${1}" "${RESET}"

  # Getting token
  HTTP_STATUS="$("${CLIENT_ARGS[@]}" -X GET "${DOCKER_AUTH_TOKEN}&scope=repository:${1}:pull,push" \
    -u "${DOCKER_USER}:${DOCKER_PASS}"
  )"
  unset DOCKER_PASS

  if [[ ${HTTP_STATUS} != "200" ]]; then
    printf "%bUnable to retrieve token for %s%b\n" "${RED}" "${1}" "${RESET}"
    printf "%bHTTP/%s%b\n" "${RED}" "${HTTP_STATUS}" "${RESET}"
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  CLIENT_ARGS+=("-H" "Authorization: Bearer $(python -c "import json; print(json.load(open('${HTTP_OUTPUT}'))['token'])")")
  rm "${HTTP_OUTPUT}"

  printf "%bTagging image %s from %s to %s...%b\n" "${BLUE}" "${1}" "${2}" "${3:-latest}" "${RESET}"

  # Getting manifest
  HTTP_STATUS="$("${CLIENT_ARGS[@]}" -X GET "${DOCKER_REGISTRY}/${1}/manifests/${2}" \
    -H "Accept: application/vnd.docker.distribution.manifest.v2+json"
  )"

  if [[ ${HTTP_STATUS} != "200" ]]; then
    printf "%bUnable to retrieve manifest for %s%b\n" "${RED}" "${1}" "${RESET}"
    printf "%bHTTP/%s%b\n" "${RED}" "${HTTP_STATUS}" "${RESET}"
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  local MANIFEST_PAYLOAD
  MANIFEST_PAYLOAD="$(cat ${HTTP_OUTPUT})"
  rm "${HTTP_OUTPUT}"

  # Promoting image
  HTTP_STATUS="$("${CLIENT_ARGS[@]}" -X PUT "${DOCKER_REGISTRY}/${1}/manifests/${3:-latest}" \
    -H "Content-Type: application/vnd.docker.distribution.manifest.v2+json" \
    -d "${MANIFEST_PAYLOAD}"
  )"

  if [[ ${HTTP_STATUS} != "201" ]]; then
    printf "%bUnable to promote manifest for %s%b\n" "${RED}" "${1}" "${RESET}"
    printf "%bHTTP/%s%b\n" "${RED}" "${HTTP_STATUS}" "${RESET}"
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  rm "${HTTP_OUTPUT}"
}

main "${@:-}"
