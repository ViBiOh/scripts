#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

main() {
  local SCRIPT_DIR
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

  source "${SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  local DOCKER_REGISTRY="https://registry-1.docker.io/v2"
  local DOCKER_AUTH_TOKEN="https://auth.docker.io/token?service=registry.docker.io"

  if [[ ${#} -lt 2 ]]; then
    printf "%bUsage: ${0} [IMAGE_NAME] [IMAGE_VERSION] [VERSION_TARGET]%b\n" "${RED}" "${RESET}"
    return 1
  fi

  var_read DOCKER_USER
  var_read DOCKER_PASS "" "secret"

  local DOCKER_IMAGE="${1}"
  local IMAGE_VERSION="${2}"
  local VERSION_TARGET="${3:-latest}"

  local HTTP_OUTPUT="http_output.txt"
  local HTTP_STATUS

  local CLIENT_ARGS=("curl" "-q" "-sSL" "--max-time" "10" "-o" "${HTTP_OUTPUT}" "-w" "%{http_code}")

  printf "%bGetting token from %s for pulling and pushing to %s...%b\n" "${BLUE}" "${DOCKER_AUTH_TOKEN}" "${DOCKER_IMAGE}" "${RESET}"

  # Getting token
  HTTP_STATUS="$(
    "${CLIENT_ARGS[@]}" -X GET "${DOCKER_AUTH_TOKEN}&scope=repository:${DOCKER_IMAGE}:pull,push" \
      -u "${DOCKER_USER}:${DOCKER_PASS}"
  )"
  unset DOCKER_PASS

  if [[ ${HTTP_STATUS} != "200" ]]; then
    printf "%bUnable to retrieve token for %s%b\n" "${RED}" "${DOCKER_IMAGE}" "${RESET}"
    printf "%bHTTP/%s%b\n" "${RED}" "${HTTP_STATUS}" "${RESET}"
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  CLIENT_ARGS+=("-H" "Authorization: Bearer $(jq --raw-output .token "${HTTP_OUTPUT}")")
  rm "${HTTP_OUTPUT}"

  printf "%bTagging image %s from %s to %s...%b\n" "${BLUE}" "${DOCKER_IMAGE}" "${IMAGE_VERSION}" "${VERSION_TARGET}" "${RESET}"

  local MANIFEST_ACCEPT=("application/vnd.docker.distribution.manifest.list.v2+json" "application/vnd.docker.distribution.manifest.v2+json")
  for manifest in "${MANIFEST_ACCEPT[@]}"; do
    printf "%bTrying with manifest %s%b\n" "${YELLOW}" "${manifest}" "${RESET}"

    # Getting manifest
    HTTP_STATUS="$(
      "${CLIENT_ARGS[@]}" -X GET "${DOCKER_REGISTRY}/${DOCKER_IMAGE}/manifests/${IMAGE_VERSION}" \
        -H "Accept: ${manifest}"
    )"

    if [[ ${HTTP_STATUS} != "200" ]]; then
      printf "%bUnable to retrieve manifest for %s%b\n" "${RED}" "${DOCKER_IMAGE}" "${RESET}"
      printf "%bHTTP/%s%b\n" "${RED}" "${HTTP_STATUS}" "${RESET}"
      cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
      return
    fi

    local MANIFEST_PAYLOAD
    MANIFEST_PAYLOAD="$(cat ${HTTP_OUTPUT})"
    rm "${HTTP_OUTPUT}"

    # Promoting image
    HTTP_STATUS="$(
      "${CLIENT_ARGS[@]}" -X PUT "${DOCKER_REGISTRY}/${DOCKER_IMAGE}/manifests/${VERSION_TARGET}" \
        -H "Content-Type: ${manifest}" \
        -d "${MANIFEST_PAYLOAD}"
    )"

    if [[ ${HTTP_STATUS} != "201" ]]; then
      printf "%bUnable to promote manifest for %s%b\n" "${RED}" "${DOCKER_IMAGE}" "${RESET}"
      printf "%bHTTP/%s%b\n" "${RED}" "${HTTP_STATUS}" "${RESET}"
      cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
      continue
    fi

    printf "%bâœ” Image promoted to latest%b\n" "${GREEN}" "${RESET}"
    rm "${HTTP_OUTPUT}"
    return
  done
}

main "${@:-}"
