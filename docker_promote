#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

main() {
  local SCRIPT_DIR
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

  source "${SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  local DOCKER_REGISTRY="https://registry-1.docker.io/v2"
  local DOCKER_AUTH_TOKEN="https://auth.docker.io/token?service=registry.docker.io"

  if [[ ${#} -lt 2 ]]; then
    ver_error "Usage: ${0} DOCKER_IMAGE IMAGE_VERSION [VERSION_TARGET]"
    return 1
  fi

  var_read DOCKER_USER
  var_read DOCKER_PASS "" "secret"

  local DOCKER_IMAGE="${1}"
  local IMAGE_VERSION="${2}"
  local VERSION_TARGET="${3:-latest}"

  local HTTP_OUTPUT="http_output.txt"
  local CLIENT_ARGS=("curl" "-q" "-sSL" "--max-time" "10" "-o" "${HTTP_OUTPUT}" "-w" "%{http_code}")
  local HTTP_STATUS

  var_info "Getting token from ${DOCKER_AUTH_TOKEN} for pulling and pushing to ${DOCKER_IMAGE}..."

  # Getting token
  HTTP_STATUS="$(
    "${CLIENT_ARGS[@]}" -X GET "${DOCKER_AUTH_TOKEN}&scope=repository:${DOCKER_IMAGE}:pull,push" \
      -u "${DOCKER_USER}:${DOCKER_PASS}"
  )"
  unset DOCKER_PASS

  if [[ ${HTTP_STATUS} != "200" ]]; then
    var_error "HTTP/${HTTP_STATUS}: Unable to retrieve token for ${DOCKER_IMAGE}"
    cat "${HTTP_OUTPUT}" 1>&2 && rm "${HTTP_OUTPUT}"
    return 1
  fi

  CLIENT_ARGS+=("-H" "Authorization: Bearer $(jq -r .token "${HTTP_OUTPUT}")")
  rm "${HTTP_OUTPUT}"

  var_info "Tagging image ${DOCKER_IMAGE} from ${IMAGE_VERSION} to ${VERSION_TARGET}..."

  local MANIFEST_ACCEPT=("application/vnd.docker.distribution.manifest.list.v2+json" "application/vnd.docker.distribution.manifest.v2+json")
  for manifest in "${MANIFEST_ACCEPT[@]}"; do
    var_warning "Trying with manifest ${manifest}"

    # Getting manifest
    HTTP_STATUS="$(
      "${CLIENT_ARGS[@]}" -X GET "${DOCKER_REGISTRY}/${DOCKER_IMAGE}/manifests/${IMAGE_VERSION}" \
        -H "Accept: ${manifest}"
    )"

    if [[ ${HTTP_STATUS} != "200" ]]; then
      var_error "HTTP/${HTTP_STATUS}: Unable to retrieve manifest for ${DOCKER_IMAGE}"
      cat "${HTTP_OUTPUT}" 1>&2 && rm "${HTTP_OUTPUT}"
      return 1
    fi

    local MANIFEST_PAYLOAD
    MANIFEST_PAYLOAD="$(cat ${HTTP_OUTPUT})"
    rm "${HTTP_OUTPUT}"

    # Promoting image
    HTTP_STATUS="$(
      "${CLIENT_ARGS[@]}" -X PUT "${DOCKER_REGISTRY}/${DOCKER_IMAGE}/manifests/${VERSION_TARGET}" \
        -H "Content-Type: ${manifest}" \
        -d "${MANIFEST_PAYLOAD}"
    )"

    if [[ ${HTTP_STATUS} != "201" ]]; then
      var_error "HTTP/${HTTP_STATUS}: Unable to promote manifest for ${DOCKER_IMAGE}"
      cat "${HTTP_OUTPUT}" 1>&2 && rm "${HTTP_OUTPUT}"
      continue
    fi

    var_success "âœ” Image promoted to latest"
    rm "${HTTP_OUTPUT}"
    return
  done
}

main "${@:-}"
