#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

if [[ ${TRACE:-0} == "1" ]]; then
  set -o xtrace
fi

script_dir() {
  if [[ -L ${BASH_SOURCE[0]} ]]; then
    dirname "$(readlink "${BASH_SOURCE[0]}")"
  else
    (
      cd "$(dirname "${BASH_SOURCE[0]}")" && pwd
    )
  fi
}

guess_component() {
  local COMPONENTS=()

  add_part() {
    local WORDS=()
    read -r -a WORDS <<<"$(printf "%s" "${1}" | sed 's|_| |g;s|-| |g;s|\.| |g')"

    COMPONENTS=("${COMPONENTS[@]}" "${WORDS[@]}")
  }

  for file in $(git diff --name-only --cached); do
    add_part "$(basename "${file%.*}")"

    local FILE_DIR
    FILE_DIR="$(dirname "${file}")"

    while [[ ${FILE_DIR} != "." ]]; do
      add_part "$(basename "${FILE_DIR}")"
      FILE_DIR="$(dirname "${FILE_DIR}")"
    done
  done

  printf "%s\n" "${COMPONENTS[@]}" | sort | uniq
}

main() {
  source "$(script_dir)/meta" && meta_init "var" "git" "github" "pass" "http"
  var_color

  if ! git_is_inside; then
    var_error "not inside a git tree"
    return 1
  fi

  git_conventionnal_commits
  git_is_valid_description "value"

  local REMAINING_LENGTH=$((COMMIT_MAX_LENGTH - 1))

  local SCOPE
  SCOPE="$(for i in "${!CONVENTIONAL_COMMIT_SCOPES[@]}"; do printf "%b%s%b %s\n" "${GREEN}" "${i}" "${RESET}" "${CONVENTIONAL_COMMIT_SCOPES[${i}]}"; done | fzf --height=20 --ansi --reverse --prompt "Scope:" | awk '{printf("%s", $1)}')"

  if [[ -z ${SCOPE} ]]; then
    return 1
  fi

  printf "SCOPE=%s\n" "${SCOPE}"
  REMAINING_LENGTH=$((REMAINING_LENGTH - ${#SCOPE}))

  local COMPONENT=""
  COMPONENT="$(cat <(guess_component) <(printf "None") | fzf --height=20 --ansi --reverse --prompt='Component:')"

  if [[ ${COMPONENT} == "None" ]]; then
    COMPONENT=""
  else
    COMPONENT="$(printf "(%s)" "${COMPONENT}")"
  fi
  printf "COMPONENT=%s\n" "${COMPONENT}"
  REMAINING_LENGTH=$((REMAINING_LENGTH - ${#COMPONENT}))

  local SKIP_CI=""
  if var_confirm "Skip CI"; then
    SKIP_CI="[skip ci] "
    REMAINING_LENGTH=$((REMAINING_LENGTH - ${#SKIP_CI}))
  fi

  local BREAKING=""
  if var_confirm "Contains breaking changes"; then
    BREAKING="!"
    REMAINING_LENGTH=$((REMAINING_LENGTH - ${#BREAKING}))
  fi

  local MESSAGE=""
  printf "%d characters remaining\n" "${REMAINING_LENGTH}"
  var_read MESSAGE

  http_init_client

  local GITHUB_TOKEN
  GITHUB_TOKEN="$(github_token)"

  if [[ -n ${GITHUB_TOKEN} ]]; then
    HTTP_CLIENT_ARGS+=("--header" "Authorization: token ${GITHUB_TOKEN}")
  fi

  local ISSUES=""
  http_request "https://api.github.com/repos/$(git_remote_repository)/issues?per_page=100" || true

  if [[ ${HTTP_STATUS} == "200" ]] && [[ $(jq --raw-output '[.[] | select(.pull_request | not)] | length' "${HTTP_OUTPUT}") -ne 0 ]]; then
    ISSUES="$(cat <(printf "None\n") <(jq --raw-output '.[] | select(.pull_request | not) | "#" + (.number | tostring) + " " + .title' "${HTTP_OUTPUT}") | fzf --height=20 --ansi --reverse --multi --prompt='Issues closed>' | awk '{printf("Closes %s", $1)}')"

    if [[ ${ISSUES} == "Closes None" ]]; then
      ISSUES=""
    else
      ISSUES="\n\n${ISSUES}"
    fi
  fi
  rm "${HTTP_OUTPUT}"

  local CO_AUTHOR_STRING=""
  http_request "https://api.github.com/repos/$(git_remote_repository)/contributors?per_page=100" || true

  if [[ ${HTTP_STATUS} == "200" ]] && [[ $(jq --raw-output 'length' "${HTTP_OUTPUT}") -ne 0 ]]; then
    local CO_AUTHOR=""
    CO_AUTHOR="$(cat <(printf "None\n") <(jq --raw-output '.[] | .login' "${HTTP_OUTPUT}") | fzf --height=20 --ansi --reverse --prompt='Co-Author>')"

    if [[ ${CO_AUTHOR} != "None" ]]; then
      http_request "https://api.github.com/users/${CO_AUTHOR}/events?per_page=100"
      if [[ ${HTTP_STATUS} == "200" ]]; then
        CO_AUTHOR_EMAIL="$(jq --raw-output '.[] | select(.type == "PushEvent") | .payload.commits[] | .author.name + "<" + .author.email + ">"' "${HTTP_OUTPUT}" | sort | uniq | grep -v '\[bot\]' | fzf --height=20 --ansi --reverse --prompt='Email>')"

        if [[ -n ${CO_AUTHOR_EMAIL} ]]; then
          CO_AUTHOR_STRING="\n\nCo-authored-by: ${CO_AUTHOR_EMAIL}"
        fi
      fi
    fi
  fi
  rm "${HTTP_OUTPUT}"

  var_print_and_run git commit --signoff --message "$(printf "%s%s%s: %s%b%s%b" "${SCOPE}" "${COMPONENT}" "${BREAKING}" "${SKIP_CI}" "${MESSAGE}" "${ISSUES}" "${CO_AUTHOR_STRING}")" "${@}"
}

main "${@}"
