#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

script_dir() {
  if [[ -L ${BASH_SOURCE[0]} ]]; then
    dirname "$(readlink "${BASH_SOURCE[0]}")"
  else
    (
      cd "$(dirname "${BASH_SOURCE[0]}")" && pwd
    )
  fi
}

guess_component() {
  local COMPONENTS=()

  add_part() {
    local WORDS=()
    read -r -a WORDS <<<"$(printf "%s" "${1}" | sed 's|_| |g;s|-| |g;s|\.| |g')"

    COMPONENTS=("${COMPONENTS[@]}" "${WORDS[@]}")
  }

  for file in $(git diff --name-only --cached); do
    add_part "$(basename "${file%.*}")"

    local FILE_DIR
    FILE_DIR="$(dirname "${file}")"

    while [[ ${FILE_DIR} != "." ]]; do
      add_part "$(basename "${FILE_DIR}")"
      FILE_DIR="$(dirname "${FILE_DIR}")"
    done
  done

  printf "%s\n" "${COMPONENTS[@]}" | sort | uniq -c | sort --reverse | head -1 | awk '{print $2}'
}

main() {
  source "$(script_dir)/meta" && meta_init "var" "git"
  var_color

  if ! git_is_inside; then
    var_error "not inside a git tree"
    return 1
  fi

  git_conventionnal_commits

  local SCOPE
  SCOPE="$(for i in "${!CONVENTIONAL_COMMIT_SCOPES[@]}"; do printf "%b%s%b %s\n" "${GREEN}" "${i}" "${RESET}" "${CONVENTIONAL_COMMIT_SCOPES[${i}]}"; done | fzf --height=20 --ansi --reverse | awk '{print $1}')"

  if [[ -z ${SCOPE} ]]; then
    return 1
  fi

  printf "SCOPE=%s\n" "${SCOPE}"

  local COMPONENT=""
  var_read COMPONENT "$(guess_component)"

  if [[ -n ${COMPONENT} ]]; then
    COMPONENT="$(printf "(%s)" "${COMPONENT}")"
  fi

  local MESSAGE=""
  var_read MESSAGE

  local BREAKING=""
  if var_confirm "Contains breaking changes"; then
    BREAKING="!"
  fi

  local SAFE_MESSAGE
  SAFE_MESSAGE="$(printf "%s" "${MESSAGE}" | sed "s|'|\\\'|g")"

  var_print_and_run "git commit --signoff --message $'$(printf "%s%s%s: %s" "${SCOPE}" "${COMPONENT}" "${BREAKING}" "${SAFE_MESSAGE}")' ${*}"
}

main "${@}"
