#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

main() {
  local SCRIPT_DIR
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

  source "${SCRIPT_DIR}/meta" && meta_init "var" "git"
  var_color

  local BASE="${1:-master}"
  local HEAD="${2:-$(git rev-parse --abbrev-ref HEAD)}"

  local UNCLEAR="false"
  IFS=$'\n'

  for commit in $(git log --pretty=format:'%s' "${BASE}..${HEAD}"); do
    printf "%bAnalyzing %b%s%b\n" "${BLUE}" "${YELLOW}" "${commit}" "${RESET}"

    if [[ $(git_is_merge_commit "${commit}") == "true" ]]; then
      printf "\t%bmerge commit, ignoring%b\n" "${YELLOW}" "${RESET}"
      continue
    fi

    if [[ $(git_is_commit_wip "${commit}") == "true" ]]; then
      printf "\t%bwip commit, please rebase%b\n" "${RED}" "${RESET}"
      UNCLEAR="true"
      continue
    fi

    if [[ $(git_is_conventional_commit "${commit}") != "true" ]]; then
      printf "\t%bnot a conventional commit, please reword according to %bconventionalcommits.org/en/v1.0.0/%b\n" "${RED}" "${GREEN}" "${RESET}"
      UNCLEAR="true"
    fi

    if [[ $(git_is_valid_description "${commit}") != "true" ]]; then
      printf "\t%btoo long, please reword below %b%s characters%b, currently %d%b\n" "${RED}" "${GREEN}" "${COMMIT_MAX_LENGTH:-70}" "${YELLOW}" "${#commit}" "${RESET}"
      UNCLEAR="true"
    fi
  done

  if [[ ${UNCLEAR} == "true" ]]; then
    exit 1
  fi

  printf "%bâœ” Everything looks fine%b\n" "${GREEN}" "${RESET}"
  exit 0
}

main "${@:-}"
