#!/usr/bin/env bash

set -o nounset -o pipefail

git_semantic() {
  printf "%bGuidelines for prefixing commit message%b\n\n" "${YELLOW}" "${RESET}"
  for prefix in "${!PREFIXES[@]}"; do
    printf "%b%s(%bcomponent%b)%b\n" "${GREEN}" "${prefix}" "${BLUE}" "${GREEN}" "${RESET}"
    printf "\t%s\n" "${PREFIXES[${prefix}]}"
  done
}

main() {
  local SCRIPT_REAL_PATH
  SCRIPT_REAL_PATH="$(python -c 'import sys; import os.path; print(os.path.realpath(sys.argv[1]))' "${BASH_SOURCE[0]}")"
  local SCRIPT_DIR
  SCRIPT_DIR="$(cd "$(dirname "${SCRIPT_REAL_PATH}")" && pwd)"

  source "${SCRIPT_DIR}/../meta" && meta_init "var" "git"
  var_color

  local FIRST_LINE
  FIRST_LINE="$(head -1 "${1}")"

  declare -A PREFIXES
  PREFIXES['build']='Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)'
  PREFIXES['chore']='Changes in the core of the repository'
  PREFIXES['ci']='Changes to our CI configuration files and scripts (example scopes: Circle, BrowserStack, SauceLabs)'
  PREFIXES['docs']='Documentation only changes'
  PREFIXES['feat']='A new feature'
  PREFIXES['fix']='A bug fix'
  PREFIXES['perf']='A code change that improves performance'
  PREFIXES['refactor']='A code change that neither fixes a bug nor adds a feature'
  PREFIXES['style']='Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)'
  PREFIXES['test']='Adding missing tests or correcting existing tests'

  if [[ ! "${FIRST_LINE}" =~ ($(IFS='|'; echo "${!PREFIXES[*]}"))\(.+\) ]]; then
    git_semantic
  fi

  exit 0
}

main "${@}"
