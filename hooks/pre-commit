#!/usr/bin/env bash

set -o nounset -o pipefail

if [[ ${TRACE:-0} == "1" ]]; then
  set -o xtrace
fi

run_command() {
  if ! "${@}"; then
    var_error "Commit Failed!"
    var_error "Please fix errors and try committing again."

    exit 1
  fi
}

get_files() {
  git diff --name-only --diff-filter=ACMR --cached -- "${@}" | tr '\n' ' ' | sed "s| *$||g"
}

get_diff() {
  git diff --name-only --diff-filter=ACMR
}

diff_check() {
  if [[ ${1} != $(get_diff) ]]; then
    var_error "Pre-commit has changed files"
    printf "%bConsider adding updated file with %bgit add --interactive && git commit --amend%b\n" "${RED}" "${BLUE}" "${RESET}" 1>&2
  fi
}

golang_check() {
  if ! [[ -e "Makefile" ]]; then
    return
  fi

  local MAKE_TARGETS
  MAKE_TARGETS="$(make -pqr 2>/dev/null | awk -F':' '/^[a-zA-Z0-9][^$#\/\t=]*:([^=]|$)/ {split($1,A,/ /);for(i in A)print A[i]}' | grep --invert-match "Makefile" | sort --unique)"

  local GO_FILES
  GO_FILES=$(get_files "*.go")

  if [[ -n ${GO_FILES-} ]]; then
    if [[ $(printf "%s" "${MAKE_TARGETS}" | grep --count "format") -eq 1 ]]; then
      var_info "Formating golang files"
      GO_FILES="${GO_FILES}" run_command make --silent format
    fi

    if [[ $(printf "%s" "${MAKE_TARGETS}" | grep --count "style") -eq 1 ]]; then
      var_info "Linting golang packages"
      run_command make --silent style
    elif [[ $(printf "%s" "${MAKE_TARGETS}" | grep --count "lint") -eq 1 ]]; then
      var_info "Linting golang packages"
      run_command make --silent lint
    fi
  fi
}

npm_check() {
  if ! [[ -e "package.json" ]]; then
    return
  fi

  local PACKAGE_JSON
  PACKAGE_JSON=$(get_files "package.json")

  local JS_FILES
  JS_FILES=$(get_files \*.js{,x})

  if [[ -n ${PACKAGE_JSON-} ]] || [[ -n ${JS_FILES-} ]]; then
    if command -v npm >/dev/null 2>&1; then
      var_info "Checking node_modules installation"
      run_command npm --silent install --no-audit --ignore-scripts
    else
      var_warning "cannot check node_modules lock file: npm not found. Skipping."
    fi
  fi

  if [[ -n ${JS_FILES-} ]]; then
    if command -v npm >/dev/null 2>&1; then
      var_info "Formating javascript files"
      run_command npm --silent run --if-present format ${JS_FILES[@]}

      var_info "Linting javascript files"
      run_command npm --silent run --if-present style ${JS_FILES[@]}
    else
      var_warning "cannot format and lint javascript files: npm not found. Skipping."
    fi
  fi
}

terraform_check() {
  local TERRAFORM_FILES
  TERRAFORM_FILES=$(get_files "*.tf")

  if [[ -n ${TERRAFORM_FILES} ]]; then
    if command -v terraform >/dev/null 2>&1; then
      var_info "Formating terraform files"

      for file in ${TERRAFORM_FILES}; do
        run_command terraform fmt "$(dirname "${file}")"
      done
    else
      var_warning "cannot format terraform files: terraform not found. Skipping."
    fi
  fi
}

yaml_check() {
  local YAML_FILES
  YAML_FILES=$(get_files \*.y{,a}ml ':(exclude)*/fixtures/*')

  if [[ -n ${YAML_FILES} ]]; then
    if [[ $(git config "hooks.noYamlFormat") != "true" ]]; then
      if command -v npx >/dev/null 2>&1; then
        var_info "Formating yaml files"
        run_command npx prettier --write ${YAML_FILES[@]}
      else
        var_warning "cannot format yaml files: prettier not found. Skipping."
      fi
    else
      var_info 'No formatting of yaml files. Toggle with `git_hooks_no_yaml_format`'
    fi

    if command -v yamllint >/dev/null 2>&1; then
      var_info "Linting yaml files"
      run_command yamllint -d "{rules: {line-length: disable}}" ${YAML_FILES[@]}
    else
      var_warning "cannot lint yaml files: yamllint not found. Skipping."
    fi
  fi
}

markdown_check() {
  local MARKDOWN_FILES
  MARKDOWN_FILES=$(get_files "*.md")

  if [[ -n ${MARKDOWN_FILES} ]]; then
    if [[ $(git config "hooks.noMarkdownFormat") != "true" ]]; then
      if command -v npx >/dev/null 2>&1; then
        var_info "Formating markdown files"
        run_command npx prettier --write ${MARKDOWN_FILES[@]}
      else
        var_warning "cannot format markdown files: npx not found. Skipping."
      fi
    else
      var_info 'No formatting of markdown files. Toggle with `git_hooks_no_md_format`'
    fi
  fi
}

tag_check() {
  local PREVIOUS_TAG
  PREVIOUS_TAG="$(git tag --sort=-creatordate | head -1)"

  if [[ -z ${PREVIOUS_TAG-} ]]; then
    return
  fi

  local COMMITS_SINCE_LAST_TAG
  COMMITS_SINCE_LAST_TAG="$(git rev-list --count "${PREVIOUS_TAG}..HEAD")"

  if [[ ${COMMITS_SINCE_LAST_TAG} -ne 0 ]]; then
    var_warning "${COMMITS_SINCE_LAST_TAG} commits since last tag"
  fi
}

script_dir() {
  local FILE_SOURCE="${BASH_SOURCE[0]}"

  if [[ -L ${FILE_SOURCE} ]]; then
    dirname "$(readlink "${FILE_SOURCE}")"
  else
    (
      cd "$(dirname "${FILE_SOURCE}")" && pwd
    )
  fi
}

main() {
  source "$(script_dir)/../meta" && meta_check "var"

  local INITIAL_DIFF
  INITIAL_DIFF=$(get_diff)

  golang_check
  npm_check
  terraform_check
  yaml_check
  markdown_check

  diff_check "${INITIAL_DIFF}"
  tag_check

  exit 0
}

main
