#!/usr/bin/env bash

set -o nounset -o pipefail

run_command() {
  if ! "${@}"; then
    var_error "Commit Failed!"
    var_error "Please fix errors and try committing again."

    exit 1
  fi
}

get_files() {
  git diff --name-only --diff-filter=ACMR --cached -- "${@}" | tr '\n' ' ' | sed "s| *$||g"
}

get_diff() {
  git diff --name-only --diff-filter=ACMR
}

diff_check() {
  if [[ ${1} != $(get_diff) ]]; then
    var_error "Pre-commit has changed files"
    printf "%bConsider adding updated file with %bgit add --interactive && git commit --amend%b\n" "${RED}" "${BLUE}" "${RESET}" 1>&2
  fi
}

golang_check() {
  local GO_FILES
  GO_FILES=$(get_files "*.go")

  if [[ -n ${GO_FILES:-} ]]; then
    var_info "Formating golang files"
    GO_FILES="${GO_FILES}" run_command make --silent format

    var_info "Linting golang packages"
    run_command make --silent style
  fi
}

npm_check() {
  local PACKAGE_JSON
  PACKAGE_JSON=$(get_files "package.json")

  local JS_FILES
  JS_FILES=$(get_files \*.js{,x})

  if [[ -n ${PACKAGE_JSON:-} ]] || [[ -n ${JS_FILES:-} ]]; then
    var_info "Checking node_modules installation"
    run_command npm --silent install --no-audit --ignore-scripts
  fi

  if [[ -n ${JS_FILES:-} ]]; then
    var_info "Formating javascript files"
    run_command npm --silent run format ${JS_FILES[@]}

    var_info "Linting javascript files"
    run_command npm --silent run style ${JS_FILES[@]}
  fi
}

terraform_check() {
  local TERRAFORM_FILES
  TERRAFORM_FILES=$(get_files "*.tf")

  if [[ -n ${TERRAFORM_FILES} ]]; then
    var_info "Formating terraform files"

    for file in ${TERRAFORM_FILES}; do
      run_command terraform fmt "$(dirname "${file}")"
    done
  fi
}

yaml_check() {
  local YAML_FILES
  YAML_FILES=$(get_files \*.yml)

  if [[ -n ${YAML_FILES} ]]; then
    var_info "Formating yaml files"
    run_command prettier --write ${YAML_FILES[@]}

    var_info "Linting yaml files"
    run_command yamllint -d "{rules: {line-length: disable}}" ${YAML_FILES[@]}
  fi
}

markdown_check() {
  local MARKDOWN_FILES
  MARKDOWN_FILES=$(get_files "*.md")

  if [[ -n ${MARKDOWN_FILES} ]]; then
    var_info "Formating markdown files"
    run_command prettier --write ${MARKDOWN_FILES[@]}
  fi
}

tag_check() {
  local PREVIOUS_TAG
  PREVIOUS_TAG="$(git tag --sort=-creatordate | head -1)"

  if [[ -z ${PREVIOUS_TAG:-} ]]; then
    return
  fi

  local COMMITS_SINCE_LAST_TAG
  COMMITS_SINCE_LAST_TAG="$(git rev-list --count "${PREVIOUS_TAG}..HEAD")"

  if [[ ${COMMITS_SINCE_LAST_TAG} -ne 0 ]]; then
    var_warning "${COMMITS_SINCE_LAST_TAG} commits since last tag"
  fi
}

script_dir() {
  if [[ -L ${BASH_SOURCE[0]} ]]; then
    dirname "$(readlink "${BASH_SOURCE[0]}")"
  else
    (
      cd "$(dirname "${BASH_SOURCE[0]}")" && pwd
    )
  fi
}

main() {
  local SCRIPT_DIR
  SCRIPT_DIR="$(script_dir)"

  source "${SCRIPT_DIR}/../meta" && meta_init "var" "git"
  var_color

  local INITIAL_DIFF
  INITIAL_DIFF=$(get_diff)

  golang_check
  npm_check
  terraform_check
  yaml_check
  markdown_check

  diff_check "${INITIAL_DIFF}"
  tag_check

  exit 0
}

main
