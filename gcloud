#!/usr/bin/env bash

export USE_GKE_GCLOUD_AUTH_PLUGIN=True
export GOOGLE_CONTAINER_REGISTRIES=("gcr.io" "eu.gcr.io" "us.gcr.io")

gcloud_auth() {
  gcloud auth login --update-adc
  gcloud config unset compute/region
  gcloud config set project "$(gcloud projects list | grep dev | awk '{print $1}')"

  if command -v docker >/dev/null 2>&1; then
    for registry in "${GOOGLE_CONTAINER_REGISTRIES[@]}"; do
      gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin "https://${registry}"
    done
  fi
}

gcloud_account() {
  local GCLOUD_ACCOUNT
  GCLOUD_ACCOUNT="$(gcloud auth list --format 'value(account)' | fzf --height=20 --ansi --reverse --select-1 --query="${1-}")"

  if [[ -n ${GCLOUD_ACCOUNT} ]]; then
    gcloud config set account "${GCLOUD_ACCOUNT}"
  fi
}

gcloud_kube_import() {
  local GCLOUD_PROJECT
  GCLOUD_PROJECT="$(gcloud projects list --format json | gcloud projects list --format json | jq --raw-output '.[] | .projectId + " " + .name' | fzf --height=20 --ansi --reverse --select-1 --query="${1-}")"

  if [[ -z ${GCLOUD_PROJECT-} ]]; then
    return 1
  fi

  local GCLOUD_PROJECT_ID
  GCLOUD_PROJECT_ID="$(printf '%s' "${GCLOUD_PROJECT}" | awk '{ print $1 }')"

  local GCLOUD_PROJECT_NAME
  GCLOUD_PROJECT_NAME="$(printf '%s' "${GCLOUD_PROJECT}" | awk '{ print $2 }' | tr '[:upper:]' '[:lower:]' | sed 's| |-|')"

  local GCLOUD_CLUSTER
  GCLOUD_CLUSTER="$(gcloud --project "${GCLOUD_PROJECT_ID}" container clusters list --format json | jq --raw-output '.[] | .name + "@" + .zone' | fzf --height=20 --ansi --reverse --select-1 --query="${2-}")"

  if [[ -z ${GCLOUD_CLUSTER-} ]]; then
    return 1
  fi

  local CLUSTER_NAME
  CLUSTER_NAME="$(printf '%s' "${GCLOUD_CLUSTER}" | awk -F '@' '{ print $1 }')"
  local CLUSTER_ZONE
  CLUSTER_ZONE="$(printf '%s' "${GCLOUD_CLUSTER}" | awk -F '@' '{ print $2 }')"

  if [[ -n ${CLUSTER_NAME-} ]]; then
    gcloud --project "${GCLOUD_PROJECT_ID}" container clusters get-credentials "${GCLOUD_PROJECT_NAME}" --zone "${CLUSTER_ZONE}"
    kubectl config rename-context "$(kubectl config current-context)" "${PROJECT_NAME}_${GCLOUD_PROJECT_NAME}"

    if [[ -n ${2-} ]]; then
      kubectl config set-context --current --namespace "${2}"
    fi
  fi
}

gcloud_sql_forward() {
  _info() {
    printf -- "%b%b%b\n" "${BLUE}" "${*}" "${RESET}" 1>&2
  }

  local GCLOUD_PROJECT
  GCLOUD_PROJECT="$(gcloud projects list --format 'value(projectId)' | fzf --height=20 --ansi --reverse --select-1 --query="${1-}" --prompt "Project:")"

  if [[ -z ${GCLOUD_PROJECT-} ]]; then
    return 1
  fi

  _info "Project: ${GCLOUD_PROJECT}"

  local SERVICE_ACCOUNT
  SERVICE_ACCOUNT="$(gcloud --project "${GCLOUD_PROJECT}" iam service-accounts list --format json | jq --raw-output '.[] | select(.disabled == false) | .email' | fzf --height=20 --ansi --reverse --select-1 --query="${2-}" --prompt "Service Account:")"

  if [[ -z ${SERVICE_ACCOUNT-} ]]; then
    return 1
  fi

  local USERNAME=${SERVICE_ACCOUNT%.gserviceaccount.com}
  USERNAME=${USERNAME/@/%40}

  _info "Connect using: postgres://${USERNAME}@127.0.0.1:PORT/DATABASE\n"

  kubernetes_sql_forward
}

gcloud_sql_proxy() {
  _print_and_run() {
    printf -- "%b%s%b\n" "${YELLOW}" "${*}" "${RESET}" 1>&2
    "${@}"
  }

  _info() {
    printf -- "%b%b%b\n" "${BLUE}" "${*}" "${RESET}" 1>&2
  }

  _find_port() {
    local START_INDEX=3
    local POSSIBLE_PORTS="9876543"

    local DATABASE_PORT="${1-5432}"

    while nc -z "127.0.0.1" "${DATABASE_PORT}" >/dev/null 2>&1; do
      if [[ ${START_INDEX} -lt 0 ]]; then
        return 1
      fi

      DATABASE_PORT="${POSSIBLE_PORTS:START_INDEX:4}"

      START_INDEX=$((START_INDEX - 1))
    done

    printf "%s" "${DATABASE_PORT}"
  }

  local GCLOUD_PROJECT
  GCLOUD_PROJECT="$(gcloud projects list --format 'value(projectId)' | fzf --height=20 --ansi --reverse --select-1 --query="${1-}" --prompt "Project:")"

  if [[ -z ${GCLOUD_PROJECT-} ]]; then
    return 1
  fi

  _info "Project: ${GCLOUD_PROJECT}"

  local SQL_INSTANCE
  SQL_INSTANCE="$(gcloud --project "${GCLOUD_PROJECT}" sql instances list --format json | jq --raw-output '.[] | .name + "@" + .connectionName + "@" + .databaseVersion + "@" + (.settings.ipConfiguration.ipv4Enabled | tostring)' | fzf --height=20 --ansi --reverse --select-1 --query="${2-}" --prompt "SQL instance:")"

  if [[ -z ${SQL_INSTANCE-} ]]; then
    return 1
  fi

  _info "SQL instance: ${SQL_INSTANCE}"

  local SQL_CONNECTION_NAME
  SQL_CONNECTION_NAME="$(printf '%s' "${SQL_INSTANCE}" | awk -F '@' '{ print $2 }')"

  if [[ -z ${SQL_CONNECTION_NAME-} ]]; then
    return 1
  fi

  local SERVICE_ACCOUNT
  SERVICE_ACCOUNT="$(gcloud --project "${GCLOUD_PROJECT}" iam service-accounts list --format json | jq --raw-output '.[] | select(.disabled == false) | .email' | fzf --height=20 --ansi --reverse --select-1 --query="${3-}" --prompt "Service Account:")"

  if [[ -z ${SERVICE_ACCOUNT-} ]]; then
    return 1
  fi

  local USERNAME=${SERVICE_ACCOUNT%.gserviceaccount.com}
  USERNAME=${USERNAME/@/%40}

  local IS_PUBLIC
  IS_PUBLIC="$(printf '%s' "${SQL_INSTANCE}" | awk -F '@' '{ print $4 }')"

  if [[ ${IS_PUBLIC} == "false" ]]; then
    printf "GCP SQL instance is private, connect by using kubernetes port-forward\n"
    return
  fi

  local EXPOSED_PORT="5432"
  EXPOSED_PORT="$(_find_port "${EXPOSED_PORT}")"

  _info "Connect using: postgres://${USERNAME}@127.0.0.1:${EXPOSED_PORT}/db_name\n"

  _print_and_run cloud_sql_proxy -instances="${SQL_CONNECTION_NAME}=tcp:127.0.0.1:${EXPOSED_PORT}" -enable_iam_login -token "$(gcloud auth print-access-token --impersonate-service-account "${SERVICE_ACCOUNT}")"
}
