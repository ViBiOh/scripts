#!/usr/bin/env bash

export USE_GKE_GCLOUD_AUTH_PLUGIN=True
export GOOGLE_CONTAINER_REGISTRIES=("gcr.io" "eu.gcr.io" "us.gcr.io")

gcloud_auth() {
  gcloud auth login --update-adc
  gcloud config unset compute/region
  gcloud config set project "$(gcloud projects list | grep dev | awk '{print $1}')"

  if command -v docker >/dev/null 2>&1; then
    gcloud_docker_login
  fi
}

gcloud_docker_login() {
  for registry in "${GOOGLE_CONTAINER_REGISTRIES[@]}"; do
    gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin "https://${registry}"
  done
}

gcloud_project() {
  local GCLOUD_PROJECT
  GCLOUD_PROJECT="$(gcloud projects list --format 'value(projectId)' | fzf --height=20 --ansi --reverse --select-1 --query="${1:-}")"

  if [[ -n ${GCLOUD_PROJECT} ]]; then
    gcloud config set project "${GCLOUD_PROJECT}"
  fi
}

gcloud_kube_import() {
  local GCLOUD_CLUSTER
  GCLOUD_CLUSTER="$(gcloud container clusters list --format json | jq --raw-output '.[] | .name + "@" + .zone' | fzf --height=20 --ansi --reverse --select-1 --query="${1:-}")"

  local CLUSTER_NAME
  CLUSTER_NAME="$(printf '%s' "${GCLOUD_CLUSTER}" | awk -F '@' '{ print $1 }')"
  local CLUSTER_ZONE
  CLUSTER_ZONE="$(printf '%s' "${GCLOUD_CLUSTER}" | awk -F '@' '{ print $2 }')"

  if [[ -n ${CLUSTER_NAME:-} ]]; then
    local PROJECT_NAME
    PROJECT_NAME="$(gcloud projects describe "$(gcloud config get project)" --format json | jq -r .name | tr '[:upper:]' '[:lower:]' | sed 's| |-|')"

    gcloud container clusters get-credentials "${CLUSTER_NAME}" --zone "${CLUSTER_ZONE}"
    kubectl config rename-context "$(kubectl config current-context)" "${PROJECT_NAME}_${CLUSTER_NAME}"

    if [[ -n ${2:-} ]]; then
      kubectl config set-context --current --namespace "${2}"
    fi
  fi
}

gcloud_sql_proxy() {
  _print_and_run() {
    printf -- "%b%b%b\n" "${YELLOW}" "${@}" "${RESET}" 1>&2
    eval "${*}"
  }

  _info() {
    printf -- "%b%b%b\n" "${BLUE}" "${*}" "${RESET}" 1>&2
  }

  local SQL_INSTANCE
  SQL_INSTANCE="$(gcloud sql instances list --format json | jq --raw-output '.[] | .name + "@" + .connectionName + "@" + .databaseVersion' | fzf --height=20 --ansi --reverse --select-1 --query="${1:-}" --prompt "SQL instances:")"

  local SQL_CONNECTION_NAME
  SQL_CONNECTION_NAME="$(printf '%s' "${SQL_INSTANCE}" | awk -F '@' '{ print $2 }')"

  if [[ -n ${SQL_CONNECTION_NAME:-} ]]; then
    local SERVICE_ACCOUNT
    SERVICE_ACCOUNT="$(gcloud iam service-accounts list --format json | jq --raw-output '.[] | select(.disabled == false) | .email' | fzf --height=20 --ansi --reverse --select-1 --query="${2:-}" --prompt "Service Account:")"

    _info "Connect using: pgcli -h localhost -p '${3:-5432}' -U '${SERVICE_ACCOUNT%.gserviceaccount.com}' <db_name>\n"
    _print_and_run "cloud_sql_proxy '-instances=${SQL_CONNECTION_NAME}=tcp:127.0.0.1:${3:-5432}' -enable_iam_login -token \$(gcloud auth print-access-token --impersonate-service-account '${SERVICE_ACCOUNT}')"
  fi
}
