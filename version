#!/usr/bin/env bash

VERSION_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

version_bump() {
  if [[ -e package.json ]]; then
    ncu -u
    npm install --ignore-scripts
    npm audit fix
  fi

  if [[ -e go.mod ]]; then
    go get -u ./...
    go mod tidy
    git diff go.mod
  fi

  if [[ -e provider.tf ]]; then
    terraform init -upgrade
  fi
}

version_semver() {
  source "${VERSION_SCRIPT_DIR}/meta" && meta_init "var" "git"
  var_color

  if [[ $(git_is_inside) != "true" ]]; then
    printf "%bnot inside a git tree%b\n" "${YELLOW}" "${RESET}"
    return 1
  fi

  local PREFIX="v"
  local MAJOR="0"
  local MINOR="0"
  local PATCH="0"

  local CURRENT_VERSION
  CURRENT_VERSION="$(git describe --tag 2> /dev/null | awk -F "-" '{print $1}')"

  if [[ -n ${CURRENT_VERSION} ]]; then
    if ! [[ ${CURRENT_VERSION} =~ ([a-zA-Z]*)([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
      printf "%bcannot parse existing version: %s%b\n" "${RED}" "${CURRENT_VERSION}" "${RESET}"
      return 2
    fi

    local PREFIX="${BASH_REMATCH[1]}"
    local MAJOR="${BASH_REMATCH[2]}"
    local MINOR="${BASH_REMATCH[3]}"
    local PATCH="${BASH_REMATCH[4]}"
  fi

  if [[ ${#} -lt 1 ]]; then
    printf "%bCurrent version is: %s%b\n" "${BLUE}" "${PREFIX}${MAJOR}.${MINOR}.${PATCH}" "${RESET}"
    printf "%bUsage: version_semver [major|minor|patch] [git ref] [quiet]%b\n" "${RED}" "${RESET}"
    return 3
  fi

  case "${1}" in
    "major")
      MAJOR="$(( MAJOR+1 ))"
      MINOR="0"
      PATCH="0"
      ;;

    "minor")
      MINOR="$(( MINOR+1 ))"
      PATCH="0"
      ;;

    "patch")
      PATCH="$(( PATCH+1 ))"
      ;;

    *)
      printf "%bunknown version name: %s%b\n" "${RED}" "${1}" "${RESET}"
      return 4
  esac

  local NEW_VERSION="${PREFIX}${MAJOR}.${MINOR}.${PATCH}"

  if [[ ${#} -lt 3 ]]; then
    git tag -a "${NEW_VERSION}" -m "${NEW_VERSION}" "${2:-HEAD}"
    printf "%bNew version is: %s%b\n" "${GREEN}" "${NEW_VERSION}" "${RESET}"
  else
    printf "%s" "${NEW_VERSION}"
  fi
}
