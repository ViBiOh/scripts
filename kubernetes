#!/usr/bin/env bash

KUBERNETES_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

kubernetes_sql_forward() {
  source "${KUBERNETES_SCRIPT_DIR}/meta" && meta_init "var" "database"

  if [[ ${#} -lt 2 ]]; then
    var_red "Usage: sql_forward ENV NAME PORT=5432"
    return 1
  fi

  local CMD="k${1-}"
  shift

  local NAME="${1-}"
  shift

  local PORT="${1-5432}"
  shift || true

  local EXPOSED_PORT="5432"
  EXPOSED_PORT="$(database_find_port "${EXPOSED_PORT}")"

  var_print_and_run kubectl port-forward $(${CMD} find deployment "${NAME}") --address "127.0.0.1" "${EXPOSED_PORT}:${PORT}"
}

kubernetes_postgres_backup() {
  source "${KUBERNETES_SCRIPT_DIR}/meta" && meta_init "var"

  local POSTGRES_USER
  var_shift_or_read POSTGRES_USER "${1-}"
  shift || true

  local POSTGRES_DB
  var_shift_or_read POSTGRES_DB "${1-}"
  shift || true

  local BACKUP_FILE
  var_shift_or_read BACKUP_FILE "${1-}"
  shift || true

  local CONTEXT
  CONTEXT="$(kubectl config get-contexts --output name | fzf --height=20 --ansi --reverse --select-1 --query="${1-}" --prompt "Context:")"

  local POSTGRES_POD
  POSTGRES_POD="$(kubectl --context "${CONTEXT}" get pods --output name | fzf --height=20 --ansi --reverse --prompt "Pod:")"

  if [[ -n ${POSTGRES_POD} ]]; then
    kubectl --context "${CONTEXT}" exec --tty "${POSTGRES_POD}" -- pg_dump --format=c --user "${POSTGRES_USER}" --dbname "${POSTGRES_DB}" >"${BACKUP_FILE}"
  fi
}

kubernetes_postgres_restore() {
  source "${KUBERNETES_SCRIPT_DIR}/meta" && meta_init "var"

  local POSTGRES_USER
  var_shift_or_read POSTGRES_USER "${1-}"
  shift || true

  local POSTGRES_DB
  var_shift_or_read POSTGRES_DB "${1-}"
  shift || true

  local CONTEXT
  CONTEXT="$(kubectl config get-contexts --output name | fzf --height=20 --ansi --reverse --select-1 --query="${1-}" --prompt "Context:")"

  local BACKUP_FILE
  BACKUP_FILE="$(
    if command -v rg >/dev/null 2>&1; then
      export FZF_DEFAULT_COMMAND='rg --files --sortr path 2> /dev/null'
    fi
    fzf --height=20 --ansi --reverse --query "${POSTGRES_DB}"
  )"

  local POSTGRES_POD
  POSTGRES_POD="$(kubectl --context "${CONTEXT}" get pods --output name | fzf --height=20 --ansi --reverse --prompt "Pod:")"

  if [[ -n ${POSTGRES_POD} ]]; then
    kubectl --context "${CONTEXT}" exec --tty --stdin "${POSTGRES_POD}" -- pg_restore --format=c --user "${POSTGRES_USER}" --dbname "${POSTGRES_DB}" <"${BACKUP_FILE}"
  fi
}

kubernetes_redis_cli() {
  _info() {
    printf -- "%b%b%b\n" "${BLUE}" "${*}" "${RESET}" 1>&2
  }

  local CONTEXT
  CONTEXT="$(kubectl config get-contexts -o name | fzf --height=20 --ansi --reverse --select-1 --query="${1-}" --prompt "Context:")"

  if [[ -z ${CONTEXT-} ]]; then
    return 1
  fi

  local NAMESPACE
  NAMESPACE="$(kubectl --context "${CONTEXT}" get namespaces --output=yaml | yq eval '.items[].metadata.name' | fzf --height=20 --ansi --reverse --select-1 --query="${2-}" --prompt "Namespace:")"

  if [[ -z ${NAMESPACE-} ]]; then
    return 1
  fi

  local ENDPOINT
  ENDPOINT="$(kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" get endpoints --output=yaml | yq eval '.items[].metadata.name' | fzf --height=20 --ansi --reverse --select-1 --query="${3-}" --prompt "Endpoint:")"

  if [[ -z ${ENDPOINT-} ]]; then
    return 1
  fi

  local AUTH_SECRET
  AUTH_SECRET="$(kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" get secrets --output=yaml | yq eval '.items[].metadata.name' | fzf --height=20 --ansi --reverse --select-1 --query="${3-}" --prompt "Secret:")"

  if [[ -z ${AUTH_SECRET-} ]]; then
    return 1
  fi

  local AUTH_PASS
  AUTH_PASS="$(kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" get secrets "${AUTH_SECRET}" --output=yaml | yq eval '.data[] |= @base64d | .data' | fzf --height=20 --ansi --reverse --select-1 --prompt "Auth:" | awk '{print $2}')"

  if [[ -z ${AUTH_PASS-} ]]; then
    return 1
  fi

  local POD_NAME="redis-cli"

  if [[ $(kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" get pod "${POD_NAME}" 2>/dev/null | wc -l) -eq 0 ]]; then
    _info "Creating a redis-cli pod"

    cat <<EOF | kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: ${POD_NAME}
  namespace: ${NAMESPACE}
  labels:
    app.kubernetes.io/name: kubernetes-redis-cli
    app.kubernetes.io/instance: ${POD_NAME}
spec:
  containers:
    - name: cli
      image: dbcliorg/iredis
      command:
        - /bin/sh
      args:
        - "-c"
        - "tail -f /dev/null"
EOF

    _info "Waiting for Running condition..."
    kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" wait --for=jsonpath='{.status.phase}'=Running "pod/${POD_NAME}"
  fi

  _info "Connecting to the ${POD_NAME} pod..."
  kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" exec "${POD_NAME}" --stdin --tty -- iredis -h "${ENDPOINT}" --password "${AUTH_PASS}" || true

  _info "Deleting the ${POD_NAME} pod..."
  kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" delete pod "${POD_NAME}"
}
