#!/usr/bin/env bash

KUBE_PG_RESTORE_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

kube_pg_backup() {
  source "${KUBE_PG_RESTORE_SCRIPT_DIR}/meta" && meta_init "var"

  local POSTGRES_USER
  var_shift_or_read POSTGRES_USER "${1-}"
  shift || true

  local POSTGRES_DB
  var_shift_or_read POSTGRES_DB "${1-}"
  shift || true

  local BACKUP_FILE
  var_shift_or_read BACKUP_FILE "${1-}"
  shift || true

  local CONTEXT
  CONTEXT="$(kubectl config get-contexts --output name | fzf --height=20 --ansi --reverse --select-1 --query="${1-}" --prompt "Context:")"

  local POSTGRES_POD
  POSTGRES_POD="$(kubectl --context "${CONTEXT}" get pods --output name | fzf --height=20 --ansi --reverse --prompt "Pod:")"

  if [[ -n ${POSTGRES_POD} ]]; then
    kubectl --context "${CONTEXT}" exec --tty "${POSTGRES_POD}" -- pg_dump --format=c --user "${POSTGRES_USER}" --dbname "${POSTGRES_DB}" >"${BACKUP_FILE}"
  fi
}

kube_pg_restore() {
  source "${KUBE_PG_RESTORE_SCRIPT_DIR}/meta" && meta_init "var"

  local POSTGRES_USER
  var_shift_or_read POSTGRES_USER "${1-}"
  shift || true

  local POSTGRES_DB
  var_shift_or_read POSTGRES_DB "${1-}"
  shift || true

  local CONTEXT
  CONTEXT="$(kubectl config get-contexts --output name | fzf --height=20 --ansi --reverse --select-1 --query="${1-}" --prompt "Context:")"

  local BACKUP_FILE
  BACKUP_FILE="$(
    if command -v rg >/dev/null 2>&1; then
      export FZF_DEFAULT_COMMAND='rg --files --sortr path 2> /dev/null'
    fi
    fzf --height=20 --ansi --reverse --query "${POSTGRES_DB}"
  )"

  local POSTGRES_POD
  POSTGRES_POD="$(kubectl --context "${CONTEXT}" get pods --output name | fzf --height=20 --ansi --reverse --prompt "Pod:")"

  if [[ -n ${POSTGRES_POD} ]]; then
    kubectl --context "${CONTEXT}" exec --tty --stdin "${POSTGRES_POD}" -- pg_restore --format=c --user "${POSTGRES_USER}" --dbname "${POSTGRES_DB}" <"${BACKUP_FILE}"
  fi
}
