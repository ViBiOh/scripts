#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

script_dir() {
  local FILE_SOURCE="${BASH_SOURCE[0]}"

  if [[ -L ${FILE_SOURCE} ]]; then
    dirname "$(readlink "${FILE_SOURCE}")"
  else
    (
      cd "$(dirname "${FILE_SOURCE}")" && pwd
    )
  fi
}

passget() {
  if ! command -v pass >/dev/null 2>&1; then
    return
  fi

  if [[ ${#} -lt 2 ]]; then
    var_red "Usage: passget PASS_NAME PASS_FIELD"
    return 1
  fi

  local PASS_NAME="${1}"
  shift

  local PASS_FIELD="${1}"
  shift

  pass show "${PASS_NAME}" | grep "^${PASS_FIELD}: " | sed "s|^${PASS_FIELD}: ||"
}

main() {
  source "$(script_dir)/meta" && meta_init "var" "http"
  var_color

  var_read DOCKER_REGISTRY "https://hub.docker.com/v2"
  var_read DOCKER_OWNER
  var_read DOCKER_USER "$(passget "dev/docker" "login")"
  var_read DOCKER_PASSWORD "$(pass "dev/docker" | head -1)" "secret"

  http_init_client
  HTTP_CLIENT_ARGS+=("--max-time" "60")

  # Login to registry
  LOGIN_PAYLOAD="$(jq -c -n --arg username "${DOCKER_USER}" --arg password "${DOCKER_PASSWORD}" '{username: $username, password: $password}')"

  http_request --request "POST" --header "Content-Type: application/json" "${DOCKER_REGISTRY}/users/login/" --data "${LOGIN_PAYLOAD}"
  if [[ ${HTTP_STATUS} != "200" ]]; then
    http_handle_error "Unable to login to registry ${DOCKER_REGISTRY}"
    return 1
  fi

  HTTP_CLIENT_ARGS+=("--header" "Authorization: JWT $(jq -r '.token' "${HTTP_OUTPUT}")")
  rm "${HTTP_OUTPUT}"

  # Listing repositories
  var_info "Listing repositories for ${DOCKER_OWNER}..."

  http_request --request GET "${DOCKER_REGISTRY}/users/${DOCKER_OWNER}/repositories/?page_size=100"
  if [[ ${HTTP_STATUS} != "200" ]]; then
    http_handle_error "Unable to list images for ${DOCKER_OWNER}"
    return 1
  fi

  local REPOSITORIES
  mapfile -t REPOSITORIES < <(jq -r '.[] | .name' "${HTTP_OUTPUT}")
  rm "${HTTP_OUTPUT}"

  for repository in "${REPOSITORIES[@]}"; do
    registry-cleaner -image "${DOCKER_OWNER}/${repository}" -username "${DOCKER_USER}" -password "${DOCKER_PASSWORD}" -delete -grep '^[a-f0-9]{7}($|-)'
    registry-cleaner -image "${DOCKER_OWNER}/${repository}" -username "${DOCKER_USER}" -password "${DOCKER_PASSWORD}" -delete -grep '[0-9]{12}' -last
  done

  unset DOCKER_PASSWORD
}

main
