#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

main() {
  local SCRIPT_DIR
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

  source "${SCRIPT_DIR}/meta" && meta_init "var" "http"
  var_color

  var_read DOCKER_REGISTRY "https://hub.docker.com/v2"
  var_read DOCKER_OWNER
  var_read DOCKER_USER
  var_read DOCKER_PASSWORD "" "secret"

  http_init_client

  # Login to registry
  LOGIN_PAYLOAD="$(jq -n --arg username "${DOCKER_USER}" --arg password "${DOCKER_PASSWORD}" '{username: $username, password: $password}')"
  unset DOCKER_PASSWORD

  http_request -X POST "${DOCKER_REGISTRY}/users/login/" -H "Content-Type: application/json" --data "${LOGIN_PAYLOAD}"
  if [[ ${HTTP_STATUS} != "200" ]]; then
    http_handle_error "Unable to login to registry ${DOCKER_REGISTRY}"
    return 1
  fi

  HTTP_CLIENT_ARGS+=("-H" "Authorization: JWT $(jq -r '.token' "${HTTP_OUTPUT}")")
  rm "${HTTP_OUTPUT}"

  # Listing repositories
  var_info "Listing repositories for ${DOCKER_OWNER}..."

  http_request -X GET "${DOCKER_REGISTRY}/users/${DOCKER_OWNER}/repositories/?page_size=100"
  if [[ ${HTTP_STATUS} != "200" ]]; then
    http_handle_error "Unable to list images for ${DOCKER_OWNER}"
    return 1
  fi

  local REPOSITORIES
  mapfile -t REPOSITORIES < <(jq -r '.[] | .name' "${HTTP_OUTPUT}")
  rm "${HTTP_OUTPUT}"

  for repository in "${REPOSITORIES[@]}"; do
    var_info "Listing tags for ${DOCKER_OWNER}/${repository}..."

    http_request -X GET "${DOCKER_REGISTRY}/repositories/${DOCKER_OWNER}/${repository}/tags/?page_size=100"
    if [[ ${HTTP_STATUS} != "200" ]]; then
      http_handle_error "Unable to list tags for ${DOCKER_OWNER}/${repository}"
      continue
    fi

    local TAGS
    mapfile -t TAGS < <(jq -r '.results[] | .name' "${HTTP_OUTPUT}")
    rm "${HTTP_OUTPUT}"

    for tag in "${TAGS[@]}"; do
      if [[ ${tag} =~ ^[0-9A-Fa-f]{6,} ]]; then
        http_request -X DELETE "${DOCKER_REGISTRY}/repositories/${DOCKER_OWNER}/${repository}/tags/${tag}/"
        if [[ ${HTTP_STATUS} != "204" ]]; then
          http_handle_error "Unable to delete tags for ${DOCKER_OWNER}/${repository}:${tag}"
          continue
        fi

        rm "${HTTP_OUTPUT}"
        var_success "${DOCKER_OWNER}/${repository}:${tag} deleted!"
      fi
    done

  done
}

main
