#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

main() {
  local SCRIPT_DIR
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

  source "${SCRIPT_DIR}/meta" && meta_init "var"
  var_color

  var_read DOCKER_REGISTRY "https://hub.docker.com/v2"
  var_read DOCKER_OWNER
  var_read DOCKER_USER
  var_read DOCKER_PASSWORD "" "secret"

  local HTTP_OUTPUT="http_output.txt"
  local CLIENT_ARGS=("curl" "-q" "-sSL" "--max-time" "10" "-o" "${HTTP_OUTPUT}" "-w" "%{http_code}")
  local HTTP_STATUS

  # Login to registry
  HTTP_STATUS="$(
    "${CLIENT_ARGS[@]}" -X POST "${DOCKER_REGISTRY}/users/login/" \
      -H "Content-Type: application/json" \
      --data "{ \"username\": \"${DOCKER_USER}\", \"password\": \"${DOCKER_PASSWORD}\" }"
  )"
  unset DOCKER_PASSWORD

  if [[ ${HTTP_STATUS} != "200" ]]; then
    var_error "HTTP/${HTTP_STATUS}: Unable to login to registry ${DOCKER_REGISTRY}"
    cat "${HTTP_OUTPUT}" 1>&2 && rm "${HTTP_OUTPUT}"
    return 1
  fi

  CLIENT_ARGS+=("-H" "Authorization: JWT $(jq -r '.token' "${HTTP_OUTPUT}")")
  rm "${HTTP_OUTPUT}"

  # Listing repositories
  var_info "Listing repositories for ${DOCKER_OWNER}..."

  HTTP_STATUS="$("${CLIENT_ARGS[@]}" -X GET "${DOCKER_REGISTRY}/users/${DOCKER_OWNER}/repositories/?page_size=100")"
  if [[ ${HTTP_STATUS} != "200" ]]; then
    var_error "HTTP/${HTTP_STATUS}: Unable to list images for ${DOCKER_OWNER}"
    cat "${HTTP_OUTPUT}" 1>&2 && rm "${HTTP_OUTPUT}"
    return 1
  fi

  local REPOSITORIES
  mapfile -t REPOSITORIES < <(jq -r '.[] | .name' "${HTTP_OUTPUT}")
  rm "${HTTP_OUTPUT}"

  for repository in "${REPOSITORIES[@]}"; do
    var_info "Listing tags for ${DOCKER_OWNER}/${repository}..."

    HTTP_STATUS="$("${CLIENT_ARGS[@]}" -X GET "${DOCKER_REGISTRY}/repositories/${DOCKER_OWNER}/${repository}/tags/?page_size=100")"
    if [[ ${HTTP_STATUS} != "200" ]]; then
      var_error "HTTP/${HTTP_STATUS}: Unable to list tags for ${DOCKER_OWNER}/${repository}"
      cat "${HTTP_OUTPUT}" 1>&2 && rm "${HTTP_OUTPUT}"
      continue
    fi

    local TAGS
    mapfile -t TAGS < <(jq -r '.results[] | .name' "${HTTP_OUTPUT}")
    rm "${HTTP_OUTPUT}"

    for tag in "${TAGS[@]}"; do
      if [[ ${tag} =~ ^[0-9A-Fa-f]{6,} ]]; then
        HTTP_STATUS="$("${CLIENT_ARGS[@]}" -X DELETE "${DOCKER_REGISTRY}/repositories/${DOCKER_OWNER}/${repository}/tags/${tag}/")"
        if [[ ${HTTP_STATUS} != "204" ]]; then
          var_error "HTTP/${HTTP_STATUS}: Unable to delete tags for ${DOCKER_OWNER}/${repository}:${tag}"
          cat "${HTTP_OUTPUT}" 1>&2 && rm "${HTTP_OUTPUT}"
          continue
        fi

        rm "${HTTP_OUTPUT}"
        var_success "${DOCKER_OWNER}/${repository}:${tag} deleted!"
      fi
    done

  done
}

main
